[
["index.html", "Rapid R Data Viz Book Chapter 1 tl;dr", " Rapid R Data Viz Book Bill Cockerill 2019-11-16 Chapter 1 tl;dr Exploratory data analysis (EDA) is the foundation for all data tasks. Do most of your EDA with just dplyr::count() and ggplot2::geom_point(). Use more ggplot functions to polish your final plot. But don’t worry about remembering all the ggplot functions and arguments, use Google. Follow three simple rules to layout your code clearly so that each line does one thing, name where each function comes from, and name all function arguments you set. Use interactive tools for EDA and presenting your final plot too (plotly, dygraphs, apexcharter, and rpivotTables). Use animation sparingly, and usually only to show change over time. Present your final plots in one of: flexdashhboards, R Markdown with a floating table of contents and tabbed sections, or a bookdown book. "],
["why-read-this.html", "Chapter 2 Why read this? 2.1 Good data analysis starts with fast &amp; intuitive EDA 2.2 Is this Data Science? 2.3 What about Python for data viz? 2.4 What about Point and Click data vis tools? 2.5 Find an R master to inspire you", " Chapter 2 Why read this? 2.1 Good data analysis starts with fast &amp; intuitive EDA Good Exploratory Data Analysis (EDA) is the foundation of most data work from data engineering to Kaggle Data Science competition winners. Ideally, you can explore your data quickly and intuitively in a flow state. You become absorbed by the patterns and stories the exploration of your data reveals, not slowed by code errors and Google searches. This book aims to help you explore data faster and with fewer errors. While at the same time to not compromise on code clarity and quality. Your quickly created code can still be easy to read and re-use with only three simple Code style rules to follow. The following chapters describe a set of linked methods in a logical order. We start first with methods to explore and visualise data quickly before you select a plot to start the intense process of polishing your final plot. We will also cover how interactive plots can be part of that rapid exploration too. Finally, we will see how to create visually appealing tables, colour palettes, and three impactful HTML formats to present your work. All the examples are aimed at beginners in R to those with an intermediate level of experience. However, even very experienced R users might pick up a new trick. And anyone can suggest an improvement or addition to this book as an issue. Each section starts with a bare-bones code example that can become part of your fast Exploratory Data Analysis toolbox. After each simple code example, a more sophsiticated version is provided in well-structured code. The more detailed examples you can use as a template to re-use for your final polished plots. The book is my current approach to data visualisation in R. But my methods keep changing and improving from reading R-Bloggers and #rstats and Slack channels every day. 2.2 Is this Data Science? The diagram below is the Data Science workflow from R for Data Science. I’ve underlined the parts of the Data Science process which this book aims to help you with, Visualise and Communicate. I’ve also added “Code Communication” to emphasise how well laid out code is another essential part of communicating. Clear code should be easy to read and understand, re-use, and quality assure. You are also helping your future yourself in case you forget what you were trying to do. Modelling is still an important part of both your data exploration and understanding and the overall Data Science process. The goal of modelling is described well in the R 4 Data Science modelling chapter: “The goal of a model is to provide a simple low-dimensional summary of a dataset. Ideally, the model will capture true “signals” (i.e. patterns generated by the phenomenon of interest), and ignore “noise” (i.e. random variation that you’re not interested in).\" Also, here is good example of modelling that conveniently uses the same Texas housing sales data we will use later in this book. 2.3 What about Python for data viz? Python is also a powerful data visualisation programming language. You will use packages such as Pandas, Seaborn, Matplotlib, and Bokeh. A good place to find similar data visualisation code examples to this book in Python are Kaggle notebooks. This link sets the filters at the top of the notebooks to show the most popular Python notebooks for visualisation. And here is the same link but filtering to the R language. 2.4 What about Point and Click data vis tools? Point and Click (PaC) tools like Excel, PowerBI and Tableau still have their place in EDA. As long as we understand their strengths and weaknesses compared to using code. Hadley Wickham compares PaC tools with code in this interview. Point-and-click interfaces are great, because they lay out all of your options in front of you, and you don’t have to remember anything. You can navigate through the set of pre-supplied options. And that’s also it’s greatest weakness, because first of all, you are constrained into what the developer thought you should be able to do. And secondly, because your primary interaction is with a mouse, it’s very difficult to record what you did. And I think that’s a problem for science, because ideally you want to say how you actually got these results. And then simply do that reliably and have other people critique you on that. But it’s also really hard when you are learning, because when you have a problem, how do you communicate that problem to someone else? You basically have to say, “I clicked here, then I clicked here, then I clicked here, and I did this.” Or you make a screen cast, and it’s just clunky. So, the advantages of programming languages like R or Python, is that the primary mechanism for communicating with the computer is text. And that is scary because there’s nothing like this blinking cursory in front of you; it doesn’t tell you what to do next. But it means you are unconstrained, because you can do anything you can imagine. And you have all these advantages of text, where if you have a problem with your code, you can copy and paste it into an email, you can Google it, you can check it and put it on GitHub, or you can share it by Twitter. There’s just so many advantages to the fact that the primary way you relate with a programming language is through code, which is just text. And so, as long as you are doing data analysis fairly regularly, I think all the advantages outweigh a point and click interface like Stata. 2.5 Find an R master to inspire you This book is just one set of ideas in a particular style. It’s not a rigid formula you must follow. Seek ideas and inspiration from a variety of people and books. Find your path in Data Science, data exploration, visualisation, and communication. Two people who have inspired me are David Robinson and Claus Wilke I describe below. I’ve also collected a series of R guides and galleries in a logical order I have found useful and inspiring. 2.5.1 David Robinson I recommend watching any of David Robinson’s live coding Tidy Tuesday videos to improve your Data Science skills. Robinson explores, cleans and then analyses data in R rapidly and intuitively. Precisely what I’m trying to help you do with this book. Several methods I use in this book I saw Robinson do first on his videos. While this book covers the exploration, visualisation and communication parts of Data Science, Robinson takes you through the complete R for Data Science workflow from import to communicate. And all in one hour (or less if you increase the playback speed to 1.5x). Amazingly Robinson has never seen the data he analyses before he starts. You get to witness how rapid it is possible to be doing Data Science in R. 2.5.2 Claus Wilke Another R master in data vis and communication is Claus Wilke. He recently created a guide similar to this book. It starts with simple examples that become more complex. In his Practical ggplot2 guide, he begins with the bare minimum code you need to create the plot. He then gradually builds the code up layer by layer until it is publication quality. Wilke wrote Practical ggplot2 to help people re-create some of the charts in his excellent Fundamentals of Data Visualization. This book offers a similar gradual method to Wilke’s but with a greater focus on exploratory data analysis. It also provides examples with more tools (particularly interactive ones) as well as recommending a clean code style. "],
["intro.html", "Chapter 3 Setup 3.1 Navigate R markdown quickly 3.2 Rstudio shortcuts 3.3 Load R packages to your library 3.4 The data to visualise 3.5 QA and Unit tests on the fly 3.6 Code style", " Chapter 3 Setup 3.1 Navigate R markdown quickly To quickly find a bit if your code to edit, instead of scrolling up and down the R Markdown code, jump instantly to the right section by using the document outline. You can show the outline in one of three ways: Hold down Ctrl+Shift+O. Click the top-right icon in the code pane. Left-click on the bottom bar of the R markdown file. The gif below shows these three methods. It was recorded with ScreenToGif. I gave a donation to the author as I found it so easy to use as well as providing lots of genuinely useful features. For example, a gif progress bar and the ability to pixelate out sections of the recording. 3.2 Rstudio shortcuts Another tip to speed up coding in RStudio is to use keyboard shortcuts. Here is the full list of RStudio shorcuts. I use Ctrl+Shift+M in Windows (Cmd+Shift+M in Mac) to insert a pipe %&gt;% with spaces which makes tidyverse coding fast. I also use Alt+- in Windows (Option+- in Mac) to create the assign operator &lt;-. 3.3 Load R packages to your library Here are all the R packages used in this book. # data vis https://www.htmlwidgets.org/index.html library(ggplot2) # static charts - amazing variety library(plotly) # interactive charts library(apexcharter) # much like the paid for highchater js library. Powerful library(trelliscopejs) # small multiples library(dygraphs) # awesome interactive timeseries # ggplot extensions https://www.ggplot2-exts.org/gallery/ library(scales) # improve your scales library(gganimate) # animate your ggplot library(png) # library(directlabels) # for directly labelling lines for example library(gghighlight) # label points of interest on your charts library(ggrepel) # move labels so they don&#39;t overlap library(glue) # # colours library(RColorBrewer) # ready to use colour pallets library(prismatic) # palettes and ways to tweak an entier pallete # tables library(kableExtra) # attractive static tables library(formattable) # colour tables. Like Excel&#39;s conditional formattinng library(rpivotTable) # like Excel&#39;s pivot table library(DT) # awesome interactive tables # Quality Assurance library(tidylog) # great for QA on the fly library(testthat) # for writing tests # wrangling / munging / manipulating library(tidyverse) # loads of useful packages in one library(crosstalk) # link html widgets like plotly to DT tables # time series tools library(anytime) # convert text into the right date type library(tsbox) # convert to time series for dygraphs # sample data library(mosaicData) # sample data 3.4 The data to visualise Often in EDA and data visualisation, we are most interested in how values change over time. For example, are things getting worse, better, higher, lower? For this reason, instead of using a built in data set like iris or mtcars we mostly use the Texas housing sales data in this book. This is a time-series data set built into ggplot. To improve your skills I recommend finding other open data sets to develop your data vis skills. I found the marriage data we look at later in this comprehensive list of R datasets. The Tidy Tuesday data sets are also a great source of data sets where you also get to learn from seeing how others (including David Robinson) have tackled them. You could also look for data stories that interest you or that you could improve and explore further. I recently saw a data visualisation in The Times newspaper on smoking and vaping that I tried to improve. The only manipulation we will do to the Texas housing sales data below is to create a real date using lubridate. # create a data frame with a real date for plotting df &lt;- ggplot2::txhousing %&gt;% dplyr::mutate(date = lubridate::make_date(year = year, month = month, day =1)) Here are the top few rows of the data frame we created using a simple kableExtra table. The Tables chapter later on in this book describes different table methods in more detail. kableExtra::kable(utils::head(df)) city year month sales volume median listings inventory date Abilene 2000 1 72 5380000 71400 701 6.3 2000-01-01 Abilene 2000 2 98 6505000 58700 746 6.6 2000-02-01 Abilene 2000 3 130 9285000 58100 784 6.8 2000-03-01 Abilene 2000 4 98 9730000 68600 785 6.9 2000-04-01 Abilene 2000 5 141 10590000 67300 794 6.8 2000-05-01 Abilene 2000 6 156 13910000 66900 780 6.6 2000-06-01 3.5 QA and Unit tests on the fly 3.5.1 tidylog to QA dplyr verbs We’ll also use tidylog with dplyr. Tidylog is an easy way to include fast basic Quality Assurance during dplyr data manipulation. Just replace the dplyr verbs with the same verb in tidylog. Tidylog tells you what each dplyr verb has done to your data. For example, how many rows dplyr::filter() drops or adds, or what percentage of values dplyr::mutate() has changed. # create a data frame with a real date for plotting df &lt;- ggplot2::txhousing %&gt;% tidylog::mutate(date = lubridate::make_date(year = year, month = month, day =1)) ## mutate: changed 8,602 values (100%) of &#39;date&#39; (0 new NA) The tidylog message above tells us that the mutate has changed (100%) of 'date' (0 new NA). This what we would expect to happen. Let’s also create a data frame with fewer cities so that some plots created later will be less crowded. Below we select only cities where the maximum number of sales in any month is more than 500. # reduce the number of cities for simpler plots df_red &lt;- df %&gt;% dplyr::group_by(city) %&gt;% tidylog::mutate(sales_max = base::max(sales)) %&gt;% dplyr::ungroup() %&gt;% tidylog::filter(sales_max &gt;= 500) ## mutate (grouped): new variable &#39;sales_max&#39; with 27 unique values and 43% NA ## filter: removed 6,171 rows (72%), 2,431 rows remaining Hold on. Look! Read the tidylog message above. It says new variable 'sales_max' with 27 unique values and 43% NA. As we filter the rows in the next line of code by sales_max we don’t want any of the values to be NA. Well spotted tidylog. We correct it below by removing NAs from salses_max by adding na.rm = TRUE inside the base:max() function. # reduce the number of cities for simpler plots df_red &lt;- df %&gt;% dplyr::group_by(city) %&gt;% tidylog::mutate(sales_max = base::max(sales, na.rm = TRUE)) %&gt;% dplyr::ungroup() %&gt;% tidylog::filter(sales_max &gt;= 500) ## mutate (grouped): new variable &#39;sales_max&#39; with 45 unique values and 0% NA ## filter: removed 5,984 rows (70%), 2,618 rows remaining The tidylog message above now tells us that the new variable sales_max has 0% NA as we would expect. 3.5.2 testthat to create unit tests on data created Unit testing is mostly used during the creation of R packages. It can also be part of your analysis code. Particularly if your work is high impact and you need to be confident the results are still valid in the future. For example, running new data through your code or when you have added new logic. Unit tests are an automatic way to highlight errors new data or new logic has introduced you may not have spotted. Hadley Wickham provides some useful “what to test” rules of thumb for when to use unit tests in his R packages book: Strive to test each behaviour in one and only one test. Then if that behaviour later changes you only need to update a single test. Avoid testing simple code that you’re confident will work. Instead focus your time on code that you’re not sure about, is fragile, or has complicated interdependencies. That said, I often find I make the most mistakes when I falsely assume that the problem is simple and doesn’t need any tests. Always write a test when you discover a bug. You may find it helpful to adopt the test-first philosophy. There you always start by writing the tests, and then write the code that makes them pass. This reflects an important problem solving strategy: start by establishing your success criteria, how you know if you’ve solved the problem. In this unit test we’re immediately going to break Hadley’s second rule above and write a test on the simple code that created our dataframe df. The unit tests are all adapted from an excellent introductory blog on unit tests. The code has been altered to follow the three Code style rules described in the next chapter to make these examples easier to read and understand. First, let’s test if the dimensions of df are as we expect with 9 columns and 8,602 rows. testthat::test_that(&quot;data dimensions correct&quot;, { testthat::expect_equal( object = base::ncol(df), expected = 9 ) testthat::expect_equal( object = base::nrow(df), expected = 8602 ) }) This testthat::test_that() test does not return a message, so we know df has passed and the dimensions are as we expect. Let’s now test data types. testthat::test_that(&#39;data types correct&#39;, { testthat::expect_is(object = df, class = &#39;data.frame&#39;) testthat::expect_is(object = df$date, class = &#39;Date&#39;) }) Again, this test no messages so df has passed this test. Finally, let’s run a test we know will fail to see what failure message is returned. testthat::test_that(&quot;no missing values&quot;, { testthat::expect_identical( object = df, expected = stats::na.omit(df) ) }) ## Error: Test failed: &#39;no missing values&#39; ## * &lt;text&gt;:3: `df` not identical to stats::na.omit(df). ## Different number of rows The code above tests if the original df object is identical to the expected object after omitting rows with NA values (using stats::na.omit()). The testthat message tells us the object and the expectation have a Different number of rows. We can now investigate this test failure by eye-balling some rows of df where any of the columns contain a missing value. Then decide if this is what we would expect from this data source. df %&gt;% dplyr::filter_all(dplyr::any_vars(base::is.na(.))) %&gt;% utils::head() %&gt;% kableExtra::kable() city year month sales volume median listings inventory date Abilene 2006 3 155 18030000 105400 NA NA 2006-03-01 Amarillo 2005 10 67 7225000 87000 NA NA 2005-10-01 Amarillo 2006 6 345 46755000 120700 NA NA 2006-06-01 Amarillo 2006 9 288 37365000 114100 NA NA 2006-09-01 Amarillo 2007 11 253 32910000 114800 NA NA 2007-11-01 Amarillo 2010 5 333 45797490 122100 NA NA 2010-05-01 3.6 Code style 3.6.1 Rule 1: Include names before all functions Include the package name before every function, even for base R functions, to make your code easier to read, I started learning R by reading other people’s code. But I got confused where functions came from. Particularly when they used functions from lots of different packages mixed with base functions and their own functions, but without the package name shown. It made their code appear more complex and intimidating than it was. Another benefit of including the package name before each function is hitting the tab key at the end of the double colon to browse all the package’s functions as a scrollable list. Also, try highlighting a function and its package name then hit the F1 key to show the help page. While hitting the F2 key can be a quick way to see all the possible arguments in a function. As well as seeing the default argument values the package author has chosen for you. 3.6.2 Rule 2: Add argument names to all functions Instead of relying on the order of the arguments the function expects, name every argument you set the value of. Your code will be quicker to understand when we know which arguments are set without having to read the help page for that function. 3.6.3 Rule 3: Each line does one thing Each line of code should do one thing. You can do this by hitting the return key after every pipe %&gt;%, comma, or plus +. RStudio will then automatically indent your code in just the right way. You can also indent old code by blocking on to it and using the RStudio shorcut Ctrl+Shift+A in Windows (Command+Shift+A in Mac). The code below works but doesn’t follow the three rules. It is cramped, slow to understand, and can be difficult to edit or re-use. ggplot(df) + geom_line(aes(date,sales, colour = city)) + ggplot2::theme_minimal() + gghighlight(max(sales) &gt; 5000, label_params = list(size = 4)) + scale_y_continuous(labels = scales::comma) + scale_x_date(date_breaks = &quot;1 year&quot;, labels = scales::date_format(&quot;%d %b %y&quot;), limits = c(as.Date(&quot;2000-01-01&quot;), as.Date(&quot;2015-07-01&quot;))) + labs(title = &quot;US Housing Sales over time&quot;, subtitle = &quot;US cities with more than 5k sales in a month&quot;, caption = &quot;Source: ggplot2 package demo data&quot;) + geom_vline(xintercept = years, linetype = 4) + theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), strip.text.x = element_text(size = 10), axis.text.x = element_text(angle = 60, hjust = 1, size = 9), legend.text = element_text(size = 12), legend.position = &quot;right&quot;, legend.direction = &quot;vertical&quot;, plot.title = element_text(size = 22, face = &quot;bold&quot;), plot.subtitle = element_text(color = &quot;grey&quot;, size = 18), plot.caption = element_text(hjust = 0, size = 12, color = &quot;darkgrey&quot;), legend.title = element_blank()) In contrast, the code below is identical to the code above, but it follows the three rules so you can more easily: Run your code top downwards in chunks adding more lines each time. Much like the popular ggplot flip-books I describe at bullet 11 in my collection of R guides and galleries. Comment out one line of code (or just one argument in a function) to understand what it does when you run the code without it. Find and edit arguments in a function (e.g. a font size) Help others QA or re-use your code. Help others new to R understand what you are doing and learn faster. Avoid being a gatekeeper of your R knowledge and skills. Share, explain and democratise what you know. You can then move on to more complex analysis in R with an even higher value. Richard Susskind advocates this in The Future of Professions) and in my example of describing NLP techniques intuitively. Further tweaks to improve code clarity are to put spaces either side of the equals sign and to use styler to apply some of these rules automatically. You can also customise styler to apply your own rules. I want to try customising styler to apply rules 1 to 3 above. I don’t know if that’s possible yet. df %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = sales, colour = city ) + ggplot2::geom_line() + ggplot2::theme_minimal() + gghighlight::gghighlight(max(sales) &gt; 5000, label_params = list(size = 4) ) + ggplot2::scale_y_continuous(labels = scales::comma) + ggplot2::scale_x_date( date_breaks = &quot;1 year&quot;, labels = scales::date_format(&quot;%d %b %y&quot;), limits = c( as.Date(&quot;2000-01-01&quot;), as.Date(&quot;2015-07-01&quot;) ) ) + ggplot2::labs( title = &quot;US Housing Sales over time&quot;, subtitle = &quot;US cities with more than 5k sales in a month&quot;, caption = &quot;Source: ggplot2 package demo data&quot; ) + ggplot2::geom_vline( xintercept = years, linetype = 4 ) + ggplot2::theme( panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), strip.text.x = element_text(size = 10), axis.text.x = element_text( angle = 60, hjust = 1, size = 9 ), legend.text = element_text(size = 12), legend.position = &quot;right&quot;, legend.direction = &quot;vertical&quot;, plot.title = element_text( size = 22, face = &quot;bold&quot; ), plot.subtitle = element_text( color = &quot;grey&quot;, size = 18 ), plot.caption = element_text( hjust = 0, size = 12, color = &quot;darkgrey&quot; ), legend.title = element_blank() ) Note this layout differs from the layered gramar of graphics code template below. ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;( mapping = aes(&lt;MAPPINGS&gt;), stat = &lt;STAT&gt;, position = &lt;POSITION&gt; ) + &lt;COORDINATE_FUNCTION&gt; + &lt;FACET_FUNCTION&gt; My preference is for the code style to let you imagine data being “poured” into ggplot through the pipe. Then we tell ggplot which columns to map, then the geom, followed by the same co-ordinate and facet functions as Wickham recommends. This is inspired by the code layout of the many flipbook guides (see bullet 11 here for examples). &lt;DATA&gt; %&gt;% ggplot2::ggplot() + ggplot2::aes(&lt;MAPPINGS&gt;) + ggplot2::&lt;GEOM_FUNCTION&gt;( stat = &lt;STAT&gt;, position = &lt;POSITION&gt; ) + &lt;COORDINATE_FUNCTION&gt; + &lt;FACET_FUNCTION&gt; "],
["exploratory-data-analysis.html", "Chapter 4 Exploratory Data Analysis 4.1 Start with dplyr counts and summaries in console 4.2 Plot data points with geom_point() 4.3 Facet by categories 4.4 Facet interactively (trelliscopejs) 4.5 Loop to plot every category separately 4.6 Polish your final plot", " Chapter 4 Exploratory Data Analysis 4.1 Start with dplyr counts and summaries in console In his Tidy Tuesday live coding videos, David Robinson usually starts exploring new data with dplyr::count() in the console. I recommend this as the first step in your EDA. In the code below we don’t use the package name in the console (so breaking rule 1 I just told you). We don’t need the package name as we won’t save this code for others to read. This means we can type more quickly to explore the data with dplyr verbs faster. df %&gt;% count(city) %&gt;% View() df %&gt;% count(city, year, month) %&gt;% View()# df %&gt;% group_by(city) %&gt;% summarise(vol_max = max(volume, na.rm = T)) %&gt;% arrange(desc(vol_max)) %&gt;% View() 4.2 Plot data points with geom_point() After using dplyr::count(), dplyr::group_by() and dplyr::summarise(), try plotting the data points with ggplot2::geom_point(). It almost NEVER fails to show you what’s going on quickly. And it is unlikely to return a confusing ggplot error message. ggplot2::geom_point() is the minimum and most reliable ggplot plot type (or geom) to start visualising data. Increasingly, I’m finding ggpplot2::geom_point() is often a good choice to include in the final pot too. Let’s look at all the values of sales for each date. df %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = sales ) + ggplot2::geom_point() ## Warning: Removed 568 rows containing missing values (geom_point). Now let’s look at the individual sales values for each city. df %&gt;% ggplot2::ggplot() + ggplot2::aes( x = sales, y = city ) + ggplot2::geom_point() ## Warning: Removed 568 rows containing missing values (geom_point). With so many data points to plot they overlap to create thick dark lines that might hide interesting variation. This is known as overplotting. Reduce over plotting by replacing ggplot2::geom_point() with ggplot2::geom_jitter(). It randomly jitters the location of the data points by a small amount so that fewer points overlap. Sometimes there are so many data points that jittering does not reduce overplotting enough. You can also make the data points lighter using the alpha argument of ggplot2::geom_jitter() as in the code below. The lower the value of alpha the fainter the points. df %&gt;% ggplot2::ggplot() + ggplot2::aes( x = sales, y = city ) + ggplot2::geom_jitter(alpha = 0.01) ## Warning: Removed 568 rows containing missing values (geom_point). Hadley Wickham has a few more tricks you can use in the free to access overplotting chapter of his ggplot2: Elegant Graphics for Data Analysis book. We all know sales of most things vary by the time of year. So let’s now put date on the x-axis, make city the colour, and because the data is over time we can join the data points by using ggplot2::geom_line(). We also use the reduced dataframe with fewer cities to create a less crowded plot. df_red %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = sales, colour = city ) + ggplot2::geom_line() ## Warning: Removed 1 rows containing missing values (geom_path). Beautiful. While sales have very different volumes between cities, we can see they all follow a similar same seasonal pattern. To bring the trends of sales closer to each other so that they are easier to compare, we can transform the sales value by showing the log of sales. This is Hadley Wickham’s approach in ggplot2: Elegant Graphics for Data Analysis. Wickham goes on to model the Texas housing sales data by fitting a linear model between the log of sales and the month. He then plots the residuals (i.e. the change in sales not explained by the month) to remove the strong seasonal effects, similar to decomposition in a classic time series analysis. Take a look at the new fable forecasting package for another way to decompose a time series. We take a visual approach to reduce the seasonal effect in the final Polish your final plot part of this chapter. We plot the entire time series with years marked so that you can easily see the strong repeating monthly sales pattern. df_red %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = base::log(sales), colour = city ) + ggplot2::geom_line() ## Warning: Removed 1 rows containing missing values (geom_path). 4.3 Facet by categories So far we have shown the different sales patterns for each city by putting city into the colour argument of ggplot. However, with lots of cities, the plot gets too crowded. When you have many categories to compare like this, then facets or “small multiples” are the right choice. In other words, draw a chart for each value in one or more columns then look at all the plots at once, usually in a grid. Also, consider setting the scales argument of the facet to \"free\" like this scales = \"free\". Each plot will then have its scale set to the maximum of each city’s sales. It lets us more easily spot interesting differences or similarities in the patterns over time between each city. df_red %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = sales, colour = city ) + ggplot2::geom_line() + ggplot2::facet_wrap(~city, scales = &quot;free&quot; ) ## Warning: Removed 1 rows containing missing values (geom_path). 4.4 Facet interactively (trelliscopejs) You can also facet and explore your data interactively with a GUI using trelliscopejs piped onto the end of your ggplot. Below we facet all the Texas cities in a trelliscopejs web page. Have a play with all the settings in the chart below to see what it does. df %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = sales ) + ggplot2::geom_line() + trelliscopejs::facet_trelliscope(~city, scales = &quot;free&quot;, nrow = 3, ncol = 5, self_contained = TRUE, # as_plotly = TRUE, # not working plotly_cfg = list(displayModeBar = FALSE) ) 4.5 Loop to plot every category separately To study each city as a full single chart on its own we can loop through the cities and plot them automatically with very little code. To do this we “nest” a dataframe for each city into one dataframe. Then loop through each of the nested city dataframes, creating a plot for each one. Here we use dplyr::group_by() on city, then use tidyr::nest() to create the indivdiual nested dataframes. df_red_nest &lt;- df_red %&gt;% dplyr::group_by(city) %&gt;% tidyr::nest() If we pipe the nested dataframe df_red_nest into View() this lets us see the individual dataframes contained within the data column that tidyr::nest() has created. df_red_nest %&gt;% View() We can also view one of the nested data frames using square brackets. Think of the numbers in the square brackets like the coordinates in Excel. The first number is the column position, and the second number is the row position. In the example below we view the second column along of the nested dataframe [[2]] and the first row of that column [[1]]. df_red_nest[[2]][[1]] %&gt;% View() Once you start to get comfortable with how square brackets work, it is a powerful way to navigate through nested R objects. The code above showed us the data in the first nested data frame of one city. The code below now drills down into the first column and first row of that single nested dataframe. This is just one cell, so is the most granular drill down possible for the object df_red_nest. df_red_nest[[2]][[1]][[1]][[1]] %&gt;% View() We can now add a plot to each nested data frame for each city. We use purrr::map2(). This purr function is a compact way to loop through two arguments in another function. The function arguments of ggplot2::ggplot() being set by purrr::map2() are the .x and .y values. They are the nested dataframes in the data column, and the city names inside the city column of the nested dataframe df_red_nest respectively. df_red_nest &lt;- df_red_nest %&gt;% dplyr::mutate(plot = purrr::map2(.x = data, .y = city, ~ ggplot2::ggplot(data = .x, aes(x = date, y = sales)) + ggtitle(glue::glue(&quot;Plot of {.y}&quot;)) + geom_line())) Take a look at the new nested data frame with a new column added containing a plot for each city. df_red_nest %&gt;% View() Let’s also look at the information held for one of the plots, again using values in square brackets. The code below shows you that the plot is a series of nested lists that describe every element of the plot. df_red_nest[[3]][[1]] %&gt;% View() Finally, let’s print every plot with this simple code. Show all the looped prints base::print(df_red_nest$plot) ## [[1]] ## ## [[2]] ## ## [[3]] ## ## [[4]] ## ## [[5]] ## Warning: Removed 1 rows containing missing values (geom_path). ## ## [[6]] ## ## [[7]] ## ## [[8]] ## ## [[9]] ## ## [[10]] ## ## [[11]] ## ## [[12]] ## ## [[13]] ## ## [[14]] 4.6 Polish your final plot We now have a bare minimum Exploratory Data Analysis toolkit. We explore the data with dplyr::count() from the console then visualise it with ggplot2::geom_point(). From exploring the data quickly we are soon ready to select a plot that tells a compelling story. But adding all the bells and whistles to make the final plot for a customer or publication can and does take a long time. So this polish shouldn’t be part of your exploratory data analysis. Also, make sure your polished plot code follows the Code style recommended earlier. You will find it quicker to comment out or tweak specific parts of your plot code until it looks just right. Clean code is faster to iterate. The plot below isn’t perfect. There may be things you want to change depending both on what story you want to tell and your style. How did I write this code? By Googling for what I wanted to do (e.g. “ggplot remove axis grid lines”), copying the code from a stackoverflow answer, then pasting the code into a clear structure as below. Many of the tweaks or polish will be to ggplot2::theme() or ggplot2::scale() but are you really going to remember the ggplot code you need for every adjustment you want to make? I no longer worry about remembering how to do it and focus on how I want it to look and get absorbed in the creation and satisfaction of the plot gradually improving. After you have built a few of your publication-quality pots with clear code, you will soon be using your plot code as a store of examples to re-use meaning that you will Google less. Be prepared for this code tweaking and plot polishing to take longer than you planned. Always. # a list of dates to add vertical lines to the plot years &lt;- base::seq.Date( from = as.Date(&quot;2000-01-01&quot;), to = as.Date(&quot;2015-01-01&quot;), by = &quot;years&quot; ) p &lt;- df %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = sales, colour = city ) + ggplot2::geom_line(size = 1) + ggplot2::theme_minimal() + gghighlight::gghighlight(base::max(sales) &gt; 5000, # highlight only cities with higher sales label_params = list(size = 4) ) + ggplot2::scale_y_continuous(labels = scales::comma) + ggplot2::scale_x_date( date_breaks = &quot;1 year&quot;, labels = scales::date_format(&quot;%b %y&quot;), limits = c( as.Date(&quot;2000-01-01&quot;), as.Date(&quot;2015-07-01&quot;) ) ) + ggplot2::labs( title = &quot;Texas Housing Sales&quot;, subtitle = &quot;Texas cities with more than 5,000 sales in any month&quot;, caption = &quot;Source: ggplot2 built in txhousing data set&quot;, x = &quot;Month&quot;, y = &quot;Volume of Sales&quot; ) + ggplot2::geom_vline( xintercept = years, linetype = 4 ) + ggplot2::theme( panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), strip.text.x = element_text(size = 10), axis.text.x = element_text( angle = 60, hjust = 1, size = 9 ), legend.text = element_text(size = 12), legend.position = &quot;right&quot;, legend.direction = &quot;vertical&quot;, plot.title = element_text( size = 22, face = &quot;bold&quot; ), plot.subtitle = element_text( color = &quot;grey&quot;, size = 18 ), plot.caption = element_text( hjust = 0, size = 12, color = &quot;darkgrey&quot; ), legend.title = element_blank() ) ## label_key: city ggplot2::ggsave(file=&quot;texas.svg&quot;, device = &quot;svg&quot;, plot=p) ## Saving 7 x 5 in image ## Warning: Removed 430 rows containing missing values (geom_path). "],
["why-start-with-geom-point.html", "Chapter 5 Why start with geom_point() ? 5.1 ggplot is famed for annoying errors 5.2 Retreat to geom_point() 5.3 geom_jitter() and geom_boxplot() is better 5.4 Final choice: geom_jitter() and stat_summary()", " Chapter 5 Why start with geom_point() ? 5.1 ggplot is famed for annoying errors It’s a good idea to start with ggplot2::geom_point() because it works for both raw and summarised data straight away. This both speeds up EDA and makes ggplot less intimidating for beginners. Let’s explore more granular data to trigger some common errors using the marriage data from the mosaicData package. We do a little data cleaning on the ceremony date and on the column that describes any previous marriages. marriage &lt;- mosaicData::Marriage %&gt;% tidylog::mutate(prev_marriage = as.character(prevconc)) %&gt;% tidylog::mutate(prev_marriage = case_when( is.na(prev_marriage) ~ &quot;First Time&quot;, TRUE ~ prev_marriage )) %&gt;% tidylog::mutate(ceremonydate1 = lubridate::parse_date_time(ceremonydate, &quot;mdy&quot;)) ## mutate: new variable &#39;prev_marriage&#39; with 3 unique values and 49% NA ## mutate: changed 48 values (49%) of &#39;prev_marriage&#39; (48 fewer NA) ## mutate: new variable &#39;ceremonydate1&#39; with 49 unique values and 0% NA kableExtra::kable(utils::head(marriage %&gt;% dplyr::select(ceremonydate1, person, prev_marriage, age, race, sign))) ceremonydate1 person prev_marriage age race sign 1996-11-09 Groom First Time 32.60274 White Aries 1996-11-12 Groom Divorce 32.29041 White Leo 1996-11-27 Groom Divorce 34.79178 Hispanic Pisces 1996-12-07 Groom Divorce 40.57808 Black Gemini 1996-12-14 Groom First Time 30.02192 White Saggitarius 1996-12-26 Groom First Time 26.86301 White Pisces In the Texas housing sales data, geom_line works because we have only one value of sales per city and date used in the “aesthetics” of the plot (e.g. x,y, colour, category, or facet being the most common aesthetics). A common way to trigger ggplot2 errors (or create confusing plots) is to use bar and line charts before the data is summarised. For example, a line chart is inappropriate with many ages per previous marriage status in the data. marriage %&gt;% ggplot2::ggplot() + ggplot2::aes( x = prev_marriage, y = age ) + ggplot2::geom_line() Changing the plot above to a bar chart instead returns a confusing error. marriage %&gt;% ggplot2::ggplot() + ggplot2::aes( x = prev_marriage, y = age ) + ggplot2::geom_bar() ## Error: stat_count() must not be used with a y aesthetic. ggplot2::geom_col() or ggplot2::geom_bar(stat = \"identity\") will plot the data for us without and error but it’s showing the sum of all the ages in each previous marriage category which doesn’t tell us an interesting story in the data. marriage %&gt;% ggplot2::ggplot() + ggplot2::aes( x = prev_marriage, y = age ) + ggplot2::geom_bar(stat = &quot;identity&quot;) #ggplot2::geom_col() Another reason to avoid starting EDA with bars is they may perform a statistical transformation without us realising. As explained in the Statistical Transformations chapter of R for Data Science. A bar or line may end up being the final plot choice, but for fast EDA let’s avoid them and retreat to our friend ggplot2::geom_point() 5.2 Retreat to geom_point() Let’s go back to using ggplot2::geom_point() and facet by person. marriage %&gt;% ggplot2::ggplot() + ggplot2::aes( x = prev_marriage, y = age ) + ggplot2::facet_wrap(~person) + ggplot2::geom_point(alpha = 0.3) Immediately this is the start of an interesting story we can follow. We see the ages of brides and grooms shown by whether they are getting married for the first time or if they have been divorced or widowed. As well as data points we might also experiment with different ways of showing these distributions. Hadley Wickham’s ggplot2: Elegant Graphics for Data Analysis has a good short chapter on displaying distributions. First let’s try a histogram and see if this helps us tell a good story. marriage %&gt;% ggplot2::ggplot() + ggplot2::aes(x = age) + ggplot2::facet_wrap(~ person + prev_marriage) + ggplot2::geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. We get a warning about the bin width. We can set the bin width by hand, say 6 bins. marriage %&gt;% ggplot2::ggplot() + ggplot2::aes(x = age) + ggplot2::facet_wrap(~ person + prev_marriage) + ggplot2::geom_histogram(bins = &quot;6&quot;) This looks better but is there an optimum bin number? There is probably no optimum width, as discussed in this stackexchange question. Let’s also try a density distribution plot using ggplot2::geom_density() p &lt;- marriage %&gt;% ggplot2::ggplot() + ggplot2::aes( x = age, fill = prev_marriage ) + ggplot2::geom_density(adjust = 1, alpha = 0.5, colour = NA) + ggplot2::facet_wrap(vars(person), ncol = 1) + ggplot2::theme_minimal() directlabels::direct.label(p, list(&quot;top.points&quot;, cex = .75, hjust = 0, vjust = -0.2)) 5.3 geom_jitter() and geom_boxplot() is better But with so few data points I think that ggplot2::box_plot() with the data points overlaid using ggplot2::geom_jitter() tells the data story well. marriage %&gt;% ggplot2::ggplot() + ggplot2::aes( x = prev_marriage, y = age ) + ggplot2::facet_wrap(~person) + ggplot2::geom_boxplot(alpha = 0.8) + ggplot2::geom_jitter(width = 0.1, alpha = 0.3) + ggplot2::theme_light() 5.4 Final choice: geom_jitter() and stat_summary() The plot above would have been my final choice until I saw the fantastic “evolution of a ggplot” post by Cedric Sherer. In the gif below you can see Sherer also starts with a boxplot, but his final choice is ggplot2::geom_jitter() and ggplot2::stat_summary(). His post gives the full code in a gradual code story presented like the ggplot flip-books. And here is his final plot shown at the end of the looping gif above. Inspired by that plot and its code I prefer my final plot below on the marriage data. It is more engaging than a boxplot as it tells the story with little or no explanation needed, more like a plot in a quality online newspaper can. p &lt;- marriage %&gt;% dplyr::group_by(person,prev_marriage) %&gt;% dplyr::mutate(pers_prev_avg = median(age)) %&gt;% dplyr::ungroup() %&gt;% dplyr::group_by(person) %&gt;% dplyr::mutate(pers_avg = median(age)) %&gt;% dplyr::ungroup() %&gt;% ggplot2::ggplot() + ggplot2::aes( x = prev_marriage, y = age, colour = prev_marriage ) + ggplot2::facet_wrap(~person, ncol = 1) + ggplot2::stat_summary(fun.y = median, geom = &quot;point&quot;, size = 4, alpha = 0.8) + ggplot2::stat_summary(aes(label= paste( round(..y..,1), &quot; years&quot;)), fun.y=median, colour = &quot;black&quot;, geom=&quot;text&quot;, size=3, vjust = -1.5) + ggplot2::geom_hline(aes(yintercept = pers_avg), color = &quot;gray70&quot;, size = 0.6) + ggplot2::geom_text(aes(x = 0.7, y = pers_avg, label = paste(person,&quot; average age&quot;, round(pers_avg,0)), #colour = &quot;white&quot;, hjust = 1.05), colour = &quot;black&quot;, size = 3) + ggplot2::geom_segment(aes(x = prev_marriage, xend = prev_marriage, y = pers_avg, yend = pers_prev_avg), size = 0.8) + ggplot2::geom_jitter(size = 2, alpha = 0.4, width = 0.2) + ggplot2::scale_color_brewer(type = &quot;qual&quot;, palette = &quot;Dark2&quot;) + ggplot2::theme_minimal()+ ggplot2::theme( plot.title = element_text(size = 14, hjust = 0), legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), panel.grid = element_blank(), strip.text.x = element_text(size = 12, hjust = 0.1), panel.border = element_rect(colour = &quot;black&quot;, fill=NA, size = 0.1) ) + ggplot2::scale_y_continuous(breaks=base::seq(0,100,10)) + ggplot2::coord_flip() + ggplot2::labs( title = &quot;Age* of brides and grooms by previous marriage status&quot;, caption = &quot;*The average ages are the median, the middle age among all ages.\\n i.e. 50% of ages fall below the median value and 50% above it&quot; ) ggplot2::ggsave(file=&quot;marriage.svg&quot;, device = &quot;svg&quot;, plot=p) ## Saving 7 x 5 in image In the plot above we can see grooms are older on average overall. But do they tend to be older or younger than their bride within each marriage? As a final quick exploratory chart let’s put the ceremony ID on the x-axis, use ggplot2::geom_point() for age, and give the data points for brides and grooms their own colour. Adding the ceremony ID bookpageID to the group aesthetic means that when we add ggplot2::geom_line() this creates a line that joins the two data points for each marriage. We can see that most grooms are older than most brides in each ceremony. marriage %&gt;% ggplot2::ggplot() + ggplot2::aes(x = bookpageID, y = age, colour = person, group = bookpageID) + ggplot2::geom_point() + ggplot2::geom_line() + ggplot2::coord_flip() "],
["interactive-plots.html", "Chapter 6 Interactive plots 6.1 Plotly cheat: convert ggplot with plotly::ggplotly() 6.2 Edit ggplot conversion with plotly::plotly_build() 6.3 Plotly basic 6.4 plotly (a few more settings) 6.5 plotly (bells &amp; whistles) 6.6 crosstalk 6.7 apexcharter basic 6.8 apexcharter (bells &amp; whistles) 6.9 dygraphs basic 6.10 dygraphs (bells &amp; whistles)", " Chapter 6 Interactive plots 6.1 Plotly cheat: convert ggplot with plotly::ggplotly() Interactive plots can help both you and your audience find and tell stories in data faster and more enjoyably. Carson Sievert maintains the Plotly R package. He describes how interactive plots can “augment” your data exploration, but only if we can “iterate quickly”. With plotly you can sometimes move faster than ggplot with fewer errors. A quick way to use Plotly is to put a ggplot you have already built through a plotly function called plotly::ggplotly(), like this below. p &lt;- df_red %&gt;% ggplot2::ggplot() + ggplot2::aes(x = date, y = sales, colour = city) + ggplot2::geom_line() plotly::ggplotly(p) 6.2 Edit ggplot conversion with plotly::plotly_build() Often, even when you have played around with how the original ggplot looks, the plotly::ggplotly() function doesn’t quite convert to the plot you want. If that happens, try using plotly::plotly_build() instead of plotly::ggplotly(). It gives you more control over the conversion from ggplot to plotly. Plotly build is a nested R object which plotly.js uses to create the web graphic. This diagram from chapter 2 of Carson Sievert’s Interactive web-based data visualization with R, plotly, and shiny explains that relationship. plotly::plotly_build() contains all the settings used to create the plotly plot that we can now edit. p &lt;- df_red %&gt;% ggplot2::ggplot() + ggplot2::aes(x = date, y = sales, colour = city) + ggplot2::geom_line() p_build &lt;- plotly::plotly_build(p) p_build We can alter any of the settings in p_build we have created above. One way to find the value we want to edit is to use utils::str() to browse all of them in a large nested tree. str() compactly displays the structure of any R object. We run it on p_build below. Show full structure of p_build utils::str(p_build) ## List of 8 ## $ x :List of 10 ## ..$ data :List of 14 ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 241 337 493 456 498 491 446 507 407 392 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 241&lt;br /&gt;city: Arlington&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 337&lt;br /&gt;city: Arlington&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 493&lt;br /&gt;city: Arlington&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 456&lt;br /&gt;city: Arlington&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(248,118,109,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Arlington&quot; ## .. .. ..$ legendgroup: chr &quot;Arlington&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 1025 1277 1603 1556 1980 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 1025&lt;br /&gt;city: Austin&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 1277&lt;br /&gt;city: Austin&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 1603&lt;br /&gt;city: Austin&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 1556&lt;br /&gt;city: Austin&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(227,137,0,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Austin&quot; ## .. .. ..$ legendgroup: chr &quot;Austin&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 244 375 391 421 533 561 449 471 397 376 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 244&lt;br /&gt;city: Bay Area&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 375&lt;br /&gt;city: Bay Area&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 391&lt;br /&gt;city: Bay Area&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 421&lt;br /&gt;city: Bay Area&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(196,154,0,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Bay Area&quot; ## .. .. ..$ legendgroup: chr &quot;Bay Area&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 464 668 849 847 1031 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 464&lt;br /&gt;city: Collin County&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 668&lt;br /&gt;city: Collin County&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 849&lt;br /&gt;city: Collin County&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 847&lt;br /&gt;city: Collin County&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(153,168,0,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Collin County&quot; ## .. .. ..$ legendgroup: chr &quot;Collin County&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 182 219 351 288 317 339 287 398 307 274 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 182&lt;br /&gt;city: Corpus Christi&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 219&lt;br /&gt;city: Corpus Christi&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 351&lt;br /&gt;city: Corpus Christi&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 288&lt;br /&gt;city: Corpus Christi&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(83,180,0,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Corpus Christi&quot; ## .. .. ..$ legendgroup: chr &quot;Corpus Christi&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 2286 3247 4244 3977 4545 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 2286&lt;br /&gt;city: Dallas&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 3247&lt;br /&gt;city: Dallas&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 4244&lt;br /&gt;city: Dallas&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 3977&lt;br /&gt;city: Dallas&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(0,188,86,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Dallas&quot; ## .. .. ..$ legendgroup: chr &quot;Dallas&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 313 423 570 529 639 677 638 618 488 460 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 313&lt;br /&gt;city: Denton County&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 423&lt;br /&gt;city: Denton County&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 570&lt;br /&gt;city: Denton County&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 529&lt;br /&gt;city: Denton County&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(0,192,148,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Denton County&quot; ## .. .. ..$ legendgroup: chr &quot;Denton County&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 306 346 492 382 459 486 422 538 382 392 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 306&lt;br /&gt;city: El Paso&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 346&lt;br /&gt;city: El Paso&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 492&lt;br /&gt;city: El Paso&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 382&lt;br /&gt;city: El Paso&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(0,191,196,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;El Paso&quot; ## .. .. ..$ legendgroup: chr &quot;El Paso&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 343 466 657 593 735 790 753 717 593 547 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 343&lt;br /&gt;city: Fort Bend&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 466&lt;br /&gt;city: Fort Bend&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 657&lt;br /&gt;city: Fort Bend&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 593&lt;br /&gt;city: Fort Bend&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(0,182,235,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Fort Bend&quot; ## .. .. ..$ legendgroup: chr &quot;Fort Bend&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 325 469 588 487 630 648 548 638 524 539 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 325&lt;br /&gt;city: Fort Worth&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 469&lt;br /&gt;city: Fort Worth&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 588&lt;br /&gt;city: Fort Worth&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 487&lt;br /&gt;city: Fort Worth&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(6,164,255,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Fort Worth&quot; ## .. .. ..$ legendgroup: chr &quot;Fort Worth&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 2653 3687 4733 4364 5215 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 2653&lt;br /&gt;city: Houston&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 3687&lt;br /&gt;city: Houston&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 4733&lt;br /&gt;city: Houston&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 4364&lt;br /&gt;city: Houston&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(165,138,255,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Houston&quot; ## .. .. ..$ legendgroup: chr &quot;Houston&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 259 309 420 383 427 492 463 460 346 321 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 259&lt;br /&gt;city: Montgomery County&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 309&lt;br /&gt;city: Montgomery County&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 420&lt;br /&gt;city: Montgomery County&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 383&lt;br /&gt;city: Montgomery County&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(223,112,248,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Montgomery County&quot; ## .. .. ..$ legendgroup: chr &quot;Montgomery County&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 344 531 717 590 746 727 686 717 551 556 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 344&lt;br /&gt;city: NE Tarrant County&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 531&lt;br /&gt;city: NE Tarrant County&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 717&lt;br /&gt;city: NE Tarrant County&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 590&lt;br /&gt;city: NE Tarrant County&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(251,97,215,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;NE Tarrant County&quot; ## .. .. ..$ legendgroup: chr &quot;NE Tarrant County&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 820 1075 1433 1263 1574 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 820&lt;br /&gt;city: San Antonio&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 1075&lt;br /&gt;city: San Antonio&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 1433&lt;br /&gt;city: San Antonio&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 1263&lt;br /&gt;city: San Antonio&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(255,102,168,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;San Antonio&quot; ## .. .. ..$ legendgroup: chr &quot;San Antonio&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## ..$ layout :List of 12 ## .. ..$ margin :List of 4 ## .. .. ..$ t: num 26.2 ## .. .. ..$ r: num 7.31 ## .. .. ..$ b: num 40.2 ## .. .. ..$ l: num 48.9 ## .. ..$ plot_bgcolor : chr &quot;rgba(235,235,235,1)&quot; ## .. ..$ paper_bgcolor: chr &quot;rgba(255,255,255,1)&quot; ## .. ..$ font :List of 3 ## .. .. ..$ color : chr &quot;rgba(0,0,0,1)&quot; ## .. .. ..$ family: chr &quot;&quot; ## .. .. ..$ size : num 14.6 ## .. ..$ xaxis :List of 28 ## .. .. ..$ domain : num [1:2] 0 1 ## .. .. ..$ automargin : logi TRUE ## .. .. ..$ type : chr &quot;linear&quot; ## .. .. ..$ autorange : logi FALSE ## .. .. ..$ range : num [1:2] 10674 16900 ## .. .. ..$ tickmode : chr &quot;array&quot; ## .. .. ..$ ticktext : chr [1:4] &quot;2000&quot; &quot;2005&quot; &quot;2010&quot; &quot;2015&quot; ## .. .. ..$ tickvals : Named num [1:4] 10957 12784 14610 16436 ## .. .. .. ..- attr(*, &quot;names&quot;)= chr [1:4] &quot;2000&quot; &quot;2005&quot; &quot;2010&quot; &quot;2015&quot; ## .. .. ..$ categoryorder : chr &quot;array&quot; ## .. .. ..$ categoryarray : chr [1:4] &quot;2000&quot; &quot;2005&quot; &quot;2010&quot; &quot;2015&quot; ## .. .. ..$ nticks : logi NA ## .. .. ..$ ticks : chr &quot;outside&quot; ## .. .. ..$ tickcolor : chr &quot;rgba(51,51,51,1)&quot; ## .. .. ..$ ticklen : num 3.65 ## .. .. ..$ tickwidth : num 0.664 ## .. .. ..$ showticklabels: logi TRUE ## .. .. ..$ tickfont :List of 3 ## .. .. .. ..$ color : chr &quot;rgba(77,77,77,1)&quot; ## .. .. .. ..$ family: chr &quot;&quot; ## .. .. .. ..$ size : num 11.7 ## .. .. ..$ tickangle : num 0 ## .. .. ..$ showline : logi FALSE ## .. .. ..$ linecolor : logi NA ## .. .. ..$ linewidth : num 0 ## .. .. ..$ showgrid : logi TRUE ## .. .. ..$ gridcolor : chr &quot;rgba(255,255,255,1)&quot; ## .. .. ..$ gridwidth : num 0.664 ## .. .. ..$ zeroline : logi FALSE ## .. .. ..$ anchor : chr &quot;y&quot; ## .. .. ..$ title :List of 2 ## .. .. .. ..$ text: chr &quot;date&quot; ## .. .. .. ..$ font:List of 3 ## .. .. .. .. ..$ color : chr &quot;rgba(0,0,0,1)&quot; ## .. .. .. .. ..$ family: chr &quot;&quot; ## .. .. .. .. ..$ size : num 14.6 ## .. .. ..$ hoverformat : chr &quot;.2f&quot; ## .. ..$ yaxis :List of 28 ## .. .. ..$ domain : num [1:2] 0 1 ## .. .. ..$ automargin : logi TRUE ## .. .. ..$ type : chr &quot;linear&quot; ## .. .. ..$ autorange : logi FALSE ## .. .. ..$ range : num [1:2] -281 9384 ## .. .. ..$ tickmode : chr &quot;array&quot; ## .. .. ..$ ticktext : chr [1:4] &quot;0&quot; &quot;2500&quot; &quot;5000&quot; &quot;7500&quot; ## .. .. ..$ tickvals : num [1:4] 0 2500 5000 7500 ## .. .. ..$ categoryorder : chr &quot;array&quot; ## .. .. ..$ categoryarray : chr [1:4] &quot;0&quot; &quot;2500&quot; &quot;5000&quot; &quot;7500&quot; ## .. .. ..$ nticks : logi NA ## .. .. ..$ ticks : chr &quot;outside&quot; ## .. .. ..$ tickcolor : chr &quot;rgba(51,51,51,1)&quot; ## .. .. ..$ ticklen : num 3.65 ## .. .. ..$ tickwidth : num 0.664 ## .. .. ..$ showticklabels: logi TRUE ## .. .. ..$ tickfont :List of 3 ## .. .. .. ..$ color : chr &quot;rgba(77,77,77,1)&quot; ## .. .. .. ..$ family: chr &quot;&quot; ## .. .. .. ..$ size : num 11.7 ## .. .. ..$ tickangle : num 0 ## .. .. ..$ showline : logi FALSE ## .. .. ..$ linecolor : logi NA ## .. .. ..$ linewidth : num 0 ## .. .. ..$ showgrid : logi TRUE ## .. .. ..$ gridcolor : chr &quot;rgba(255,255,255,1)&quot; ## .. .. ..$ gridwidth : num 0.664 ## .. .. ..$ zeroline : logi FALSE ## .. .. ..$ anchor : chr &quot;x&quot; ## .. .. ..$ title :List of 2 ## .. .. .. ..$ text: chr &quot;sales&quot; ## .. .. .. ..$ font:List of 3 ## .. .. .. .. ..$ color : chr &quot;rgba(0,0,0,1)&quot; ## .. .. .. .. ..$ family: chr &quot;&quot; ## .. .. .. .. ..$ size : num 14.6 ## .. .. ..$ hoverformat : chr &quot;.2f&quot; ## .. ..$ shapes :List of 1 ## .. .. ..$ :List of 9 ## .. .. .. ..$ type : chr &quot;rect&quot; ## .. .. .. ..$ fillcolor: logi NA ## .. .. .. ..$ line :List of 3 ## .. .. .. .. ..$ color : logi NA ## .. .. .. .. ..$ width : num 0 ## .. .. .. .. ..$ linetype: chr(0) ## .. .. .. ..$ yref : chr &quot;paper&quot; ## .. .. .. ..$ xref : chr &quot;paper&quot; ## .. .. .. ..$ x0 : num 0 ## .. .. .. ..$ x1 : num 1 ## .. .. .. ..$ y0 : num 0 ## .. .. .. ..$ y1 : num 1 ## .. ..$ showlegend : logi TRUE ## .. ..$ legend :List of 5 ## .. .. ..$ bgcolor : chr &quot;rgba(255,255,255,1)&quot; ## .. .. ..$ bordercolor: chr &quot;transparent&quot; ## .. .. ..$ borderwidth: num 1.89 ## .. .. ..$ font :List of 3 ## .. .. .. ..$ color : chr &quot;rgba(0,0,0,1)&quot; ## .. .. .. ..$ family: chr &quot;&quot; ## .. .. .. ..$ size : num 11.7 ## .. .. ..$ y : num 0.968 ## .. ..$ annotations :List of 1 ## .. .. ..$ :List of 13 ## .. .. .. ..$ text : chr &quot;city&quot; ## .. .. .. ..$ x : num 1.02 ## .. .. .. ..$ y : num 1 ## .. .. .. ..$ showarrow : logi FALSE ## .. .. .. ..$ ax : num 0 ## .. .. .. ..$ ay : num 0 ## .. .. .. ..$ font :List of 3 ## .. .. .. .. ..$ color : chr &quot;rgba(0,0,0,1)&quot; ## .. .. .. .. ..$ family: chr &quot;&quot; ## .. .. .. .. ..$ size : num 14.6 ## .. .. .. ..$ xref : chr &quot;paper&quot; ## .. .. .. ..$ yref : chr &quot;paper&quot; ## .. .. .. ..$ textangle : num 0 ## .. .. .. ..$ xanchor : chr &quot;left&quot; ## .. .. .. ..$ yanchor : chr &quot;bottom&quot; ## .. .. .. ..$ legendTitle: logi TRUE ## .. ..$ hovermode : chr &quot;closest&quot; ## .. ..$ barmode : chr &quot;relative&quot; ## ..$ config :List of 2 ## .. ..$ doubleClick : chr &quot;reset&quot; ## .. ..$ showSendToCloud: logi FALSE ## ..$ source : chr &quot;A&quot; ## ..$ attrs :List of 1 ## .. ..$ 26054ac2ffd:List of 4 ## .. .. ..$ x :Class &#39;formula&#39; language ~~date ## .. .. .. .. ..- attr(*, &quot;.Environment&quot;)=&lt;environment: 0x000000001d9c66c0&gt; ## .. .. ..$ y :Class &#39;formula&#39; language ~~sales ## .. .. .. .. ..- attr(*, &quot;.Environment&quot;)=&lt;environment: 0x000000001d9c66c0&gt; ## .. .. ..$ colour:Class &#39;formula&#39; language ~~city ## .. .. .. .. ..- attr(*, &quot;.Environment&quot;)=&lt;environment: 0x000000001d9c66c0&gt; ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;plotly_eval&quot; ## ..$ cur_data : chr &quot;26054ac2ffd&quot; ## ..$ visdat :List of 1 ## .. ..$ 26054ac2ffd:function (y) ## ..$ highlight :List of 7 ## .. ..$ on : chr &quot;plotly_click&quot; ## .. ..$ persistent: logi FALSE ## .. ..$ dynamic : logi FALSE ## .. ..$ selectize : logi FALSE ## .. ..$ opacityDim: num 0.2 ## .. ..$ selected :List of 1 ## .. .. ..$ opacity: num 1 ## .. ..$ debounce : num 0 ## ..$ shinyEvents: chr [1:11] &quot;plotly_hover&quot; &quot;plotly_click&quot; &quot;plotly_selected&quot; &quot;plotly_relayout&quot; ... ## ..$ base_url : chr &quot;https://plot.ly&quot; ## ..- attr(*, &quot;TOJSON_FUNC&quot;)=function (x, ...) ## $ width : NULL ## $ height : NULL ## $ sizingPolicy :List of 6 ## ..$ defaultWidth : chr &quot;100%&quot; ## ..$ defaultHeight: num 400 ## ..$ padding : NULL ## ..$ viewer :List of 6 ## .. ..$ defaultWidth : NULL ## .. ..$ defaultHeight: NULL ## .. ..$ padding : NULL ## .. ..$ fill : logi TRUE ## .. ..$ suppress : logi FALSE ## .. ..$ paneHeight : NULL ## ..$ browser :List of 5 ## .. ..$ defaultWidth : NULL ## .. ..$ defaultHeight: NULL ## .. ..$ padding : NULL ## .. ..$ fill : logi TRUE ## .. ..$ external : logi FALSE ## ..$ knitr :List of 3 ## .. ..$ defaultWidth : NULL ## .. ..$ defaultHeight: NULL ## .. ..$ figure : logi TRUE ## $ dependencies :List of 5 ## ..$ :List of 10 ## .. ..$ name : chr &quot;typedarray&quot; ## .. ..$ version : chr &quot;0.1&quot; ## .. ..$ src :List of 1 ## .. .. ..$ file: chr &quot;htmlwidgets/lib/typedarray&quot; ## .. ..$ meta : NULL ## .. ..$ script : chr &quot;typedarray.min.js&quot; ## .. ..$ stylesheet: NULL ## .. ..$ head : NULL ## .. ..$ attachment: NULL ## .. ..$ package : chr &quot;plotly&quot; ## .. ..$ all_files : logi FALSE ## .. ..- attr(*, &quot;class&quot;)= chr &quot;html_dependency&quot; ## ..$ :List of 10 ## .. ..$ name : chr &quot;jquery&quot; ## .. ..$ version : chr &quot;1.11.3&quot; ## .. ..$ src :List of 1 ## .. .. ..$ file: chr &quot;C:/Users/lexybill/OneDrive/Documents/R/win-library/3.6/crosstalk/lib/jquery&quot; ## .. ..$ meta : NULL ## .. ..$ script : chr &quot;jquery.min.js&quot; ## .. ..$ stylesheet: NULL ## .. ..$ head : NULL ## .. ..$ attachment: NULL ## .. ..$ package : NULL ## .. ..$ all_files : logi TRUE ## .. ..- attr(*, &quot;class&quot;)= chr &quot;html_dependency&quot; ## ..$ :List of 10 ## .. ..$ name : chr &quot;crosstalk&quot; ## .. ..$ version : chr &quot;1.0.0&quot; ## .. ..$ src :List of 1 ## .. .. ..$ file: chr &quot;C:/Users/lexybill/OneDrive/Documents/R/win-library/3.6/crosstalk/www&quot; ## .. ..$ meta : NULL ## .. ..$ script : chr &quot;js/crosstalk.min.js&quot; ## .. ..$ stylesheet: chr &quot;css/crosstalk.css&quot; ## .. ..$ head : NULL ## .. ..$ attachment: NULL ## .. ..$ package : NULL ## .. ..$ all_files : logi TRUE ## .. ..- attr(*, &quot;class&quot;)= chr &quot;html_dependency&quot; ## ..$ :List of 10 ## .. ..$ name : chr &quot;plotly-htmlwidgets-css&quot; ## .. ..$ version : chr &quot;1.49.4&quot; ## .. ..$ src :List of 1 ## .. .. ..$ file: chr &quot;htmlwidgets/lib/plotlyjs&quot; ## .. ..$ meta : NULL ## .. ..$ script : NULL ## .. ..$ stylesheet: chr &quot;plotly-htmlwidgets.css&quot; ## .. ..$ head : NULL ## .. ..$ attachment: NULL ## .. ..$ package : chr &quot;plotly&quot; ## .. ..$ all_files : logi FALSE ## .. ..- attr(*, &quot;class&quot;)= chr &quot;html_dependency&quot; ## ..$ :List of 10 ## .. ..$ name : chr &quot;plotly-main&quot; ## .. ..$ version : chr &quot;1.49.4&quot; ## .. ..$ src :List of 1 ## .. .. ..$ file: chr &quot;htmlwidgets/lib/plotlyjs&quot; ## .. ..$ meta : NULL ## .. ..$ script : chr &quot;plotly-latest.min.js&quot; ## .. ..$ stylesheet: NULL ## .. ..$ head : NULL ## .. ..$ attachment: NULL ## .. ..$ package : chr &quot;plotly&quot; ## .. ..$ all_files : logi FALSE ## .. ..- attr(*, &quot;class&quot;)= chr &quot;html_dependency&quot; ## $ elementId : NULL ## $ preRenderHook:function (p, registerFrames = TRUE) ## $ jsHooks : list() ## - attr(*, &quot;class&quot;)= chr [1:2] &quot;plotly&quot; &quot;htmlwidget&quot; ## - attr(*, &quot;package&quot;)= chr &quot;plotly&quot; In the code below we set the font size of the x-axis to 42. We found this font setting by browsing the object structure of p_build with utils::str() in the tree shown above. Then, to create the code that alters the value we have found with str(), put a $ at the end of p_build in the console and hit the tab key. It shows all the named elements of the first nested level. We can then work our way down the nested levels by adding dollar signs to the next level and hitting tab. Repeat this until you have worked your way to the bottom of the tree and found the setting you want to change. p_build$x$layout$xaxis$tickfont$size = 42 p_build The code above has changed the font size to a massive 42 in the chart above. However, this dollar and tab key method to search through the named elements of the nested plotly object is fiddly and time-consuming. The gif below shows an easier Point and Click method. This feature is only available in RStudio versions from 1.1.383 onwards. To do this, in the Environment pane click on the magnifying glass to the right of p_build. You can then expand the nested lists as a tree. Browse the tree to find the value you want to change. To the right of each value at the bottom of the tree is an icon. Clicking on the icon will automatically generate the code you need to alter that value. Below is example code generated by this PaC method. p_build[[\"x\"]][[\"layout\"]][[\"xaxis\"]][[\"tickfont\"]][[\"size\"]] And here is how we alter that code to change the font size to 42 as we did with the dollar and tab method previously. p_build[[\"x\"]][[\"layout\"]][[\"xaxis\"]][[\"tickfont\"]][[\"size\"]] = 42 6.3 Plotly basic Sometimes even passing a ggplot object through plotly::plotly_build() does not create the plot we want. Or it’s just too time-consuming to edit the plot in this way. Using plotly itself can be a better option. Plotly is very forgiving. Below we don’t tell plotly what kind of chart we want (such as points or lines) but it still creates a plot. And plotly picks our friend from ggplot, a data points plot. Plotly also generates lots of suggestions to improve the plot. df_red %&gt;% plotly::plot_ly(x = ~date, y = ~sales, color = ~city) ## No trace type specified: ## Based on info supplied, a &#39;scatter&#39; trace seems appropriate. ## Read more about this trace type -&gt; https://plot.ly/r/reference/#scatter ## No scatter mode specifed: ## Setting the mode to markers ## Read more about this attribute -&gt; https://plot.ly/r/reference/#scatter-mode 6.4 plotly (a few more settings) With a few more settings we can turn it into a plotly line plot. df_red %&gt;% plotly::plot_ly(x = ~date, y = ~sales, color = ~city, type = &#39;scatter&#39;, mode = &#39;lines&#39;) 6.5 plotly (bells &amp; whistles) Two more bells and whistles we can add are specifying the colour of the lines and an interactive range slider on the x-axis. df_red %&gt;% plotly::plot_ly(x = ~date, y = ~sales, text = rownames(df_red)) %&gt;% add_lines(color = ~city, colorscale = &quot;set3&quot;) %&gt;% rangeslider() Carson Sievert has created lots of “bells and whistles” plotly plots on the same Texas housing data in his Plotly book. And a few more creative plots here on the Texas data. Below we reproduce some of Sievert’s plots after re-formatting his code according to our three Code style rules described earlier. It makes his examples easier to understand and re-use. In this plot try clicking on one of the lines to highlight one city against all the other cities. # declare `city` as the SQL &#39;query by&#39; column tx &lt;- plotly::highlight_key(data = df, key = ~city) # initiate a plotly object base &lt;- plotly::plot_ly(data = tx, color = I(&quot;black&quot;)) %&gt;% dplyr::group_by(city) # create a time series of median house price base %&gt;% dplyr::group_by(city) %&gt;% plotly::add_lines(x = ~date, y = ~median) In this plot we can look at cities in isolation as well as highlighted against all others. # generally speaking, use a &quot;unique&quot; key for filter, # especially when you have multiple filters! tx &lt;- plotly::highlight_key(df) gg &lt;- tx %&gt;% ggplot2::ggplot() + ggplot2::aes(x = date, y = median, group = city) + ggplot2::geom_line() filter &lt;- crosstalk::bscols( crosstalk::filter_select(&quot;id&quot;, &quot;Select a city&quot;, tx, ~city), plotly::ggplotly(gg, dynamicTicks = TRUE), widths = c(12, 12) ) ## Warning in crosstalk::bscols(crosstalk::filter_select(&quot;id&quot;, &quot;Select a city&quot;, : ## Sum of bscol width units is greater than 12 tx2 &lt;- plotly::highlight_key(data = df, key = ~city, &quot;Select a city&quot;) gg &lt;- tx2 %&gt;% ggplot2::ggplot() + ggplot2::aes(x = date, y = median, group = city) + ggplot2::geom_line() select &lt;- plotly::highlight( plotly::ggplotly(gg, tooltip = &quot;city&quot;), selectize = TRUE, persistent = TRUE ) ## We recommend setting `persistent` to `FALSE` (the default) because persistent selection mode can now be used by holding the shift key (while triggering the `on` event). crosstalk::bscols(filter, select) ## Setting the `off` event (i.e., &#39;plotly_doubleclick&#39;) to match the `on` event (i.e., &#39;plotly_click&#39;). You can change this default via the `highlight()` function. Select a city In this final example Carson adds lots more interactivity to play with. tx &lt;- plotly::highlight_key(df) widgets &lt;- crosstalk::bscols( widths = c(12, 12, 12), crosstalk::filter_select(id = &quot;city&quot;, label = &quot;Cities&quot;, sharedData = tx, group = ~city), crosstalk::filter_slider(id = &quot;sales&quot;, label = &quot;Sales&quot;, sharedData = tx, column = ~sales), crosstalk::filter_checkbox(id = &quot;year&quot;, label = &quot;Years&quot;, sharedData = tx, group = ~year, inline = TRUE) ) ## Warning in crosstalk::bscols(widths = c(12, 12, 12), crosstalk::filter_select(id ## = &quot;city&quot;, : Sum of bscol width units is greater than 12 crosstalk::bscols( widths = c(4, 8), widgets, plotly::plot_ly(data = tx, x = ~date, y = ~median, showlegend = FALSE) %&gt;% plotly::add_lines(color = ~city, colors = &quot;black&quot;) ) Cities Sales Years 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 6.6 crosstalk Finally, here is a more basic use of crosstalk with plotly that you may find easier to re-use on your data. df_crosstalk &lt;- crosstalk::SharedData$new(data = df, key = ~year) crosstalk::filter_select( id = &quot;year&quot;, label = &quot;Select a year&quot;, allLevels = TRUE, multiple = FALSE, sharedData = df_crosstalk, group = ~ factor(year) ) Select a year df_crosstalk %&gt;% plotly::plot_ly(x = ~date, y = ~sales, color = ~city, type = &#39;scatter&#39;, mode = &#39;lines&#39;) 6.7 apexcharter basic The highcharter package creates interactive charts to the quality you often see on newspaper websites. It can produce great data visualisations like these poll tracking plots. However, highcharter not free to use. ApexCharter is almost as good. It’s inspired by highcharter, and it is free to use. Look how easily we can create a chart with this simple code. df_red %&gt;% apexcharter::apex(type = &quot;line&quot;, mapping = aes(x = date, y = sales, group = city )) 6.8 apexcharter (bells &amp; whistles) To add bells and whistles use the apexcharter reference, It is well laid out with good examples. Below I’ve added several useful settings in a clear code format for you to re-use. df_red %&gt;% apexcharter::apex(aes(x = date, y = sales, group = city), type = &quot;line&quot;) %&gt;% apexcharter::ax_legend(position = &quot;right&quot;) %&gt;% apexcharter::ax_stroke(width = 2) %&gt;% apexcharter::ax_yaxis(title = list(text = &quot;Sales&quot;)) %&gt;% apexcharter::ax_xaxis(labels = list(format = &quot;yyyy&quot;)) %&gt;% apexcharter::ax_labs(title = &quot;House sales in Texas cities&quot;, subtitle = &quot;this is a subtitle&quot;) %&gt;% apexcharter::ax_title(style = list(fontSize = &quot;22px&quot;)) %&gt;% apexcharter::ax_subtitle(style = list(fontSize = &quot;16px&quot;, color = &quot;#BDBDBD&quot;)) %&gt;% apexcharter::ax_chart(zoom = list(enabled = TRUE, type = &quot;xy&quot;)) 6.9 dygraphs basic Dygraphs are another great choice for time series data. Dygraphs require the dataframe to be a time series object. One quick way to convert to a time series object is the tsbox package. df_red_ts &lt;- df_red %&gt;% dplyr::select(date,city,sales) %&gt;% tsbox::ts_xts() df_red_ts %&gt;% dygraphs::dygraph() 6.10 dygraphs (bells &amp; whistles) Below is a bells &amp; whistles version you can play around with as a code template for your own data. The help pages for dygraphs are well laid out. You really only need this one guide to find out how to change all of dygraphs settings. dateWindow &lt;- c(&quot;2014-01-01&quot;, &quot;2015-07-01&quot;) presAnnotation &lt;- function(dygraph, x, text) { dygraph %&gt;% dyAnnotation(x, text, width = 60) } presBankHolidays &lt;- function(dygraph) { dygraph %&gt;% dyEvent(&quot;2014-07-03&quot;, &quot;Independence Day&quot;, labelLoc = &quot;bottom&quot;) %&gt;% dyEvent(&quot;2014-11-26&quot;, &quot;Thanksgiving&quot;, labelLoc = &quot;bottom&quot;) } df_red_ts %&gt;% dygraphs::dygraph(main = &quot;House sales in Texas cities&quot;) %&gt;% # https://github.com/rstudio/dygraphs/issues/80 dyAxis( &quot;y&quot;, label = &quot;Sales&quot;, # http://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript valueFormatter = &#39;function(d){return d.toString().replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, &quot;,&quot;);}&#39;, axisLabelFormatter = &#39;function(d){return d.toString().replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, &quot;,&quot;);}&#39;, axisLabelFontSize = 10, axisLabelWidth = 70 ) %&gt;% dyRangeSelector( height = 60, dateWindow = dateWindow ) %&gt;% dyShading( from = &quot;2014-1-1&quot;, to = &quot;2014-12-31&quot; ) %&gt;% presBankHolidays() %&gt;% dyLegend(width = 600) %&gt;% presAnnotation(&quot;2014-07-01&quot;, text = &quot;2014&quot;) %&gt;% presAnnotation(&quot;2015-06-01&quot;, text = &quot;2015&quot;) %&gt;% dyOptions(colors = RColorBrewer::brewer.pal(8, &quot;Set2&quot;)) %&gt;% dyOptions(drawPoints = TRUE, pointSize = 2) %&gt;% dyLegend( show = &quot;always&quot;, hideOnMouseOut = FALSE ) "],
["animation.html", "Chapter 7 Animation 7.1 ggplot animation 7.2 plotly animation", " Chapter 7 Animation 7.1 ggplot animation Animation is quick to add to ggplot using the gganimate package. I’ve had a play here inspired by a good Tweet of examples. While fun to create and watch, animation should only be used where the movement tells the story more effectively than a static plot. For example, to show change over time. Here is the monthly pattern of house sales we can see the large changes between years. However, the static plot in the Polish your final plot section of this book probably gives the audience a better understanding of the change in sales over each year. # Method from: https://github.com/thomasp85/gganimate/wiki/Temperature-time-series # https://stackoverflow.com/questions/54945861/problems-with-geom-text-and-pausing-the-animation # for each city and year find the sales value in the latest month availalbe # usually this is 12 but sometimes it&#39;s an earlier month label_anim &lt;- df %&gt;% dplyr::group_by(city,year) %&gt;% dplyr::summarise(max_month = max(month)) %&gt;% dplyr::ungroup() %&gt;% dplyr::inner_join(df_red, by = c(&quot;city&quot;=&quot;city&quot;, &quot;year&quot;=&quot;year&quot;, &quot;max_month&quot; = &quot;month&quot;)) %&gt;% dplyr::mutate(label_it = sales) %&gt;% dplyr::select(city,year,max_month,label_it) colors &lt;- c(&quot;Houston&quot; = &quot;#D9717D&quot;, &quot;Dallas&quot; = &quot;#4DB6D0&quot;, &quot;Austin&quot; = &quot;#BECA55&quot;) p &lt;- df %&gt;% dplyr::filter(city %in% c(&quot;Houston&quot;, &quot;Dallas&quot;, &quot;Austin&quot;)) %&gt;% dplyr::left_join(label_anim, by = c(&quot;city&quot; = &quot;city&quot;,&quot;year&quot; = &quot;year&quot;)) %&gt;% ggplot2::ggplot() + ggplot2::aes(x = month, y = sales, colour = city) + ggplot2::geom_line(size = 2) + ggplot2::theme_minimal() + ggplot2::coord_cartesian(clip = &#39;off&#39;) + # allow labels outside of plot ggplot2::theme(legend.position = &quot;none&quot;) + gganimate::transition_states(states = year, transition_length = 3, state_length = 1) + ggplot2::labs(title = &quot;Texas Housing Sales in : {closest_state}&quot;, caption = &quot;Source: ggplot2 package demo data&quot; ) + ggplot2::theme(plot.title = element_text(hjust = 1, vjust = -10, size = 30), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), strip.text.x = element_text(size = 15), axis.text.x = element_text(size = 15), axis.text.y = element_text(size = 15), plot.caption = element_text( hjust = 0, size = 12, color = &quot;darkgrey&quot; ) ) + ggplot2::scale_color_manual(values = colors) + ggplot2::scale_x_continuous(name = &quot;Month&quot;, limits = c(1,13), breaks = c(1,2,3,4,5,6,7,8,9,10,11,12), label = c(&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;Apr&quot;,&quot;May&quot;,&quot;Jun&quot;,&quot;Jul&quot;,&quot;Aug&quot;,&quot;Sep&quot;,&quot;Oct&quot;,&quot;Nov&quot;,&quot;Dec&quot;)) + ggplot2::geom_text(aes(x = max_month, y = label_it, label = city), hjust = 0, size = 8) gganimate::animate(p, width = 900, height = 600, end_pause = 10, fps = 20, rewind = FALSE, duration = 15) gganimate::anim_save(filename = &quot;housing.gif&quot;) 7.2 plotly animation Carson Sievert’s book shows us how to animate in plotly. The code to animate a plotly plot is easier than for ggplot. Simply specify which column to animate over in the frame argument of plotly::add_lines(). df_red %&gt;% plotly::plot_ly(alpha = 1) %&gt;% plotly::add_lines( x = ~month, y = ~sales, frame = ~year, # this single line of code turns it into an animation! color = ~factor(city), line = list(simplify = FALSE) ) %&gt;% plotly::layout(yaxis = list(title = &quot;Sales&quot;)) ## Warning in RColorBrewer::brewer.pal(N, &quot;Set2&quot;): n too large, allowed maximum for palette Set2 is 8 ## Returning the palette you asked for with that many colors ## Warning in RColorBrewer::brewer.pal(N, &quot;Set2&quot;): n too large, allowed maximum for palette Set2 is 8 ## Returning the palette you asked for with that many colors Here we play around with the animation style. df_red %&gt;% plotly::plot_ly(alpha = 1) %&gt;% plotly::add_lines( x = ~month, y = ~sales, frame = ~year, color = ~factor(city), line = list(simplify = FALSE) ) %&gt;% plotly::layout(yaxis = list(title = &quot;Sales&quot;)) %&gt;% plotly::animation_opts(frame = 1000, # easing = &quot;elastic&quot;, easing = &quot;bounce&quot;, redraw = FALSE) %&gt;% plotly::animation_slider(currentvalue = list(prefix = &quot;YEAR &quot;, font = list(color=&quot;blue&quot;))) ## Warning in RColorBrewer::brewer.pal(N, &quot;Set2&quot;): n too large, allowed maximum for palette Set2 is 8 ## Returning the palette you asked for with that many colors ## Warning in RColorBrewer::brewer.pal(N, &quot;Set2&quot;): n too large, allowed maximum for palette Set2 is 8 ## Returning the palette you asked for with that many colors "],
["tables.html", "Chapter 8 Tables 8.1 DataTable basic 8.2 DataTable (bells &amp; whistles) 8.3 Colour DataTable with formattable 8.4 rpivottable basic 8.5 rpivottable (bells &amp; whistles)", " Chapter 8 Tables 8.1 DataTable basic We usually plot tidy data where the data frame is “long”. But for easy to read tables we will often want to reshape our long data to “wide”. In the Texas housing sales data, this means showing one column per month (rather than one row per month in tidy data). To make the data wide we use tidyr::pivot_wider() then pipe that wide data into DT::datatable() to create an interactive table very easily. # first reshape with new tidyr df_wide &lt;- df %&gt;% dplyr::filter(year == 2014) %&gt;% dplyr::arrange(city,date) %&gt;% dplyr::mutate(date1 = base::format(date, &quot;%b %y&quot;)) %&gt;% tidyr::pivot_wider(id_cols = city, names_from = date1, values_from = sales) df_wide %&gt;% DT::datatable(df_wide) 8.2 DataTable (bells &amp; whistles) The DT DataTables reference describes all the DataTable elements you can change with clear examples and code. This resource is usually all you need to refer to. Eventually you will have chosen lots of different DataTable options to apply. However, if your work includes many tables, this will lead to lots of repeated settings code. Reduce the amount of code by setting the default table options globally like this. options(DT.options = list( pageLength = 10, lengthMenu = c(5, 10, 20, 50, 100, 200, 500), dom = &quot;Blfrtip&quot;, buttons = list(list(extend = &quot;csv&quot;, filename = &quot;download&quot;)), keys = TRUE, autoWidth = TRUE )) The default settings above will then be applied every time you use DT::datatable() df_wide %&gt;% DT::datatable( caption = &quot;Housing sales&quot;, filter = &quot;top&quot;, extensions = c(&quot;FixedColumns&quot;, &quot;Buttons&quot;), options = list(columnDefs = list(list(width = &quot;150px&quot;, targets = c(1)))) ) 8.3 Colour DataTable with formattable Colouring DataTable cells based on the value it contains is a common client request. Here is a code template you can re-use that is like Excel’s conditional formatting. # find 8 cut points going from the smallest to the largest value of sales in 2014 cuts &lt;- base::seq(from = min(df$sales[df$year==2014], na.rm = TRUE), to = max(df$sales[df$year==2014], na.rm=TRUE), length.out = 8) # define 9 colours for those cut points (1 more than the cut points needed) colours &lt;- RColorBrewer::brewer.pal(n = 9,name = &quot;Blues&quot;) # columns to format cols &lt;- base::seq(from = 2, to = ncol(df_wide), by = 1) df_wide %&gt;% dplyr::mutate_if(.predicate = base::is.character, .funs = base::as.factor) %&gt;% # converts an character columns to a factor so that the drop down menu works in the DataTable DT::datatable( caption = &quot;Housing sales&quot;, filter = &quot;top&quot;, extensions = c(&quot;FixedColumns&quot;, &quot;Buttons&quot;), options = list(columnDefs = list(list(width = &quot;150px&quot;, targets = c(1)))) ) %&gt;% DT::formatStyle(columns = cols, background = DT::styleInterval(cuts = cuts, values = colours)) %&gt;% DT::formatCurrency(columns = cols, currency = &quot;&quot;, digits = 0, interval = 3, mark = &#39;,&#39;) 8.4 rpivottable basic I love Excel pivot tables and charts for exploring data. rpivotTables are a similar exploratory tool in R. We simply put the dataframe into the function rpivotTable::rpviotTable() then play around with the html output below (as you would with an Excel pivot table). df_red %&gt;% rpivotTable::rpivotTable() 8.5 rpivottable (bells &amp; whistles) Once we’ve decided how we want the rpivotTable to look manually we can hard code the layout to tell a particular story for our audience. df_red %&gt;% rpivotTable::rpivotTable( rows = c(&quot;year&quot;,&quot;city&quot;), cols = &quot;date&quot;, inclusions = list(year = list(&quot;2014&quot;)), aggregatorName = &quot;Sum&quot;, vals = &quot;sales&quot;, rendererName = &quot;Line Chart&quot;) "],
["colours.html", "Chapter 9 Colours 9.1 RColorBrewer 9.2 Prismatic 9.3 Hand-picked colours", " Chapter 9 Colours 9.1 RColorBrewer We have already been setting colours in some of the previous plots using the RColorBrewer package. RColourBrewer contains ready-made colour palettes. We can view all the palettes it contains in one picture like this. # easy colours RColorBrewer::display.brewer.all() We can also filter the picture above to show only palettes friendly to people who are colour blind. display.brewer.all(colorblindFriendly = TRUE) And we can create a palette of colours with a specific number of colours like this. Then view them in a simple bar plot. mypalette &lt;- RColorBrewer::brewer.pal(9,&quot;Set2&quot;) ## Warning in RColorBrewer::brewer.pal(9, &quot;Set2&quot;): n too large, allowed maximum for palette Set2 is 8 ## Returning the palette you asked for with that many colors graphics::barplot(1:9,col = mypalette) 9.2 Prismatic Prismatic lets us play around with colour palettes by shifting one aspect of all of the colours it contains at the same time. For example, below, we start with the terrain palette in the prismatic package. terrain &lt;- prismatic::colour(terrain.colors(10)) plot(terrain) Now we turn the palette grey. terrain_gray &lt;- prismatic::clr_grayscale(terrain) plot(terrain_gray) Darken the palette. terrain_darken &lt;- prismatic::clr_darken(terrain) plot(terrain_darken) Make the palette negative. terrain_negate &lt;- prismatic::clr_negate(terrain) plot(terrain_negate) 9.3 Hand-picked colours You can also hand-pick your colour palette from this colour picking website. The website is recommended by Michael Toth in his excellent detailed guide to ggplot colours. The colour picking website was used to create and then copy and paste the colours into this palette below. newpalette &lt;- c(&quot;#804759&quot;,&quot;#713E4E&quot;,&quot;#633543&quot;,&quot;#562D39&quot;,&quot;#48252F&quot;,&quot;#3B1D25&quot;) barplot(1:6,col = newpalette) "],
["final-document.html", "Chapter 10 Final document 10.1 Picking a final output doc 10.2 flexdashboard (vs Shiny) 10.3 R markdown with floating contents and tabbed sections 10.4 bookdown", " Chapter 10 Final document 10.1 Picking a final output doc It is hard but satisfying work to explore your data and tell interesting stories in polished plots. An important final step is to show it off in easy to navigate HTML documents. Here are three good options. 10.2 flexdashboard (vs Shiny) This Flexdashboard by Matt Dray is a fantastic working example. It includes some of the interactivity we saw earlier using crosstalk, plotly and DT tables described in the Interactive plots chapter. Also, here is an easy to follow tutorial about how to build flexdashboards Flexdashboards using crosstalk are an excellent alternative to a shinydashboard as the code is much easier to build and edit. It is because the interactivity for the user is taken care of by the simple crosstalk options. In contrast, with Shiny you will need to understand, build, and maintain the more complex reactivity of your app. As well as needing a platform to deploy your shiny app. In contrast, with flexdashboard, you can email the HTML document it creates to your audience. However, if your flexdashboard presents a lot of data in its plots and tables this can make the HTML doc that flexdashboard creates large and too slow to open for users. Shiny does not suffer from this as it only pulls the data the user requests from the selections they have make (e.g. with drop-down menus). In other words, when you open a Shiny app the front end doesn’t contain all of the data a user could view, but in flexdashboard it does. Shiny is also a better option when you want to give users a greater range of interactive plots and selection options than crosstalk can provide. Crosstalk is limited to basic filtering for only a limited number of html widgets. In contrast, Shiny can be set up to allow users to interact with pretty much any R package you want to use in your app. 10.3 R markdown with floating contents and tabbed sections When using R markdown I’ve found a floating table of contents and tabbed sections are the most effective for providing compact and easy to navigate HTML documents, particularly when you are presenting a lot of information at once, such as a detailed report. 10.4 bookdown Finally, how this book itself is created is surprisingly quick to do. Here is a board bookdown guide to follow. Here is how I built this book: Clone or download this minimal example. Add this line…. output_dir: \"docs\" …to the configuration file _bookdown.yml (as described here) In RStudio build the book to gitbook format either using the drop down in the build tab (next to Environment tab), or by running this line of code.. rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8') …this builds the book into a single docs folder holding all the html files needed in it. Push the docs folder to your GitHub repository so it’s ready to publish. Now on GitHub website follow this guidance. It describes how you go to the Settings of the repository, then GitHub Pages section, then the Source section that has a drop-down. Select the third option of the Source drop-down that is…. master branch/docs folder Use only the docs folder for Github pages ..it then has a bit of a think then tells you when the published book is ready to view and at what web address. "]
]
