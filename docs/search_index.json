[
["index.html", "Rapid R Data Viz Book Chapter 1 tl;dr", " Rapid R Data Viz Book Bill Cockerill 2019-11-05 Chapter 1 tl;dr Exploratory data analysis (EDA) is the foundation for all data tasks. Do most of your EDA with just dplyr::count and ggplot2::geom_point(). Use more ggplot functions to polish your final plot. But don’t worry about remembering all the ggplot settings. Just use Google. Lay out your code really clearly so that one line does one thing. Use interactive tools too (plotly, dygraphs, apexcharter, DT tables). Present in flexdashhboard, R Markdown with a floating contents, or bookdown. "],
["why-read-this.html", "Chapter 2 Why read this? 2.1 Good data analysis starts with fast &amp; intuitive EDA 2.2 Is this Data Science? 2.3 What about Python for data viz? 2.4 What about Point and Click data vis tools? 2.5 Find an R master to inspire you", " Chapter 2 Why read this? 2.1 Good data analysis starts with fast &amp; intuitive EDA Good Exploratory Data Analysis (EDA) is the foundation of most data work from data engineering to Kaggle Data Science competition winners. Ideally, you are able to explore your data quickly and intuitively in a flow state. You become absorbed by the patterns and stories that your data reveals, not slowed by code errors and Google searches. In this book I aim to help you explore data faster and with fewer errors. And at the same time not compromise on code clarity and quality. Your quickly created code can still be easy to read and re-use with only a few simple rules to follow. The following chapters are a series of linked methods presented in a logical order. First we start with exploring and visualising data quickly before you commit to the intense process of polishing your final plot. All the examples are aimed at beginners in R to those with an intermediate level of experience. However, even very experienced R users might pick up a new trick. And anyone could suggest an improvement or addition to this book as an issue. Each section starts with a bare bones code example with no bells or whistles. This means each method could become part of your fast Exploratory Data Analysis toolbox. After each simple code example a more complex version is provided in well structured code. The more detailed examples you can use as a template to adapt for your own final polished plots. The book is my current approach to data visualisation in R. But my methods keep changing and improving from reading R-Bloggers and #rstats and Slack channels every day. 2.2 Is this Data Science? The diagram below is the Data Science workflow from R for Data Science. I’ve underlined the Visualise and Communicate parts of the Data Science process which this book aims help you with. I’ve also added Code Communication to emphasise the importance of well laid out code as another important part of communicating. Clear code should be easy to read and understand, re-use, and quality assure. You are also helping your future yourself if you have forgotten what you were trying to do. Modelling is still an important part of your data exploration and understanding and part of the Data Science process. This is well explained in the R 4 Data Science modelling chapter. “The goal of a model is to provide a simple low-dimensional summary of a dataset. Ideally, the model will capture true “signals” (i.e. patterns generated by the phenomenon of interest), and ignore “noise” (i.e. random variation that you’re not interested in).\" Also, here is good example of modelling that uses the same housing sales data we will use later in this book. 2.3 What about Python for data viz? Python is also a powerful data visualisation programming language using packages such as Pandas, Seaborn, Matplotlib, and Bokeh. My working day usually limited to R so this is where I’ve built my data visualisation skills so far. A good place to find similar data vis code examples to this book in Python are Kaggle notebooks. Use the filters at the top to select popular data visualisation notebooks in Python code. Sort them by the most votes. 2.4 What about Point and Click data vis tools? Point and Click (PaC) tools like Excel, PowerBI and Tableau still have their place in EDA, as long as we understand their strengths and weaknesses compared to code. Hadley Wickham compares PaC tools with code in this interview. Point-and-click interfaces are great, because they lay out all of your options in front of you, and you don’t have to remember anything. You can navigate through the set of pre-supplied options. And that’s also it’s greatest weakness, because first of all, you are constrained into what the developer thought you should be able to do. And secondly, because your primary interaction is with a mouse, it’s very difficult to record what you did. And I think that’s a problem for science, because ideally you want to say how you actually got these results. And then simply do that reliably and have other people critique you on that. But it’s also really hard when you are learning, because when you have a problem, how do you communicate that problem to someone else? You basically have to say, “I clicked here, then I clicked here, then I clicked here, and I did this.” Or you make a screen cast, and it’s just clunky. So, the advantages of programming languages like R or Python, is that the primary mechanism for communicating with the computer is text. And that is scary because there’s nothing like this blinking cursory in front of you; it doesn’t tell you what to do next. But it means you are unconstrained, because you can do anything you can imagine. And you have all these advantages of text, where if you have a problem with your code, you can copy and paste it into an email, you can Google it, you can check it and put it on GitHub, or you can share it by Twitter. There’s just so many advantages to the fact that the primary way you relate with a programming language is through code, which is just text. And so, as long as you are doing data analysis fairly regularly, I think all the advantages outweigh a point and click interface like Stata. 2.5 Find an R master to inspire you This book is just one set of ideas in a certain style. It’s not a rigid formula you must follow. Seek ideas and inspiration from a variety of people and books. Find your own path in Data Science, data exploration, visualisation, and communication. Two people who have inspired me are David Robinson and Claus Wilke I describe below. I’ve also collected a series of R guides and galleries in a logic order I have found useful and inspiring. 2.5.1 David Robinson I recommend watching any of David Robinson’s live coding Tidy Tuesday videos to improve your Data Science skills. Robinson explores, cleans then analyses data in R rapidly and intuitively. Precisely what I’m trying to help you do with this book. Several methods I use in this book I saw Robinson do first on his videos. While this book covers the exploration, visualisation and communication parts of Data Science, Robinson takes you through the complete R for Data Science workflow from import to communicate. And all in one hour (or less if you increase the playback speed to 1.5x). 2.5.2 Claus Wilke Another R master in data vis and communication is Claus Wilke. He recently created a guide similar to this book. It starts with simple examples that become more complex. In his Practical ggplot2 guide he starts with the bare minimum code you need to create the plot. He then gradually builds the code up layer by layer until it is publication quality. Wilke wrote Practical ggplot2 to help people re-create some of the charts in his excellent Fundamentals of Data Visualization more easily on their own data. This book offers a similar gradual method to Wilke’s but with a greater focus on exploratory data analysis, and offering examples with more tools, particulary for interactive plots, as well as recommending a clean code style. "],
["intro.html", "Chapter 3 Setup 3.1 Navigate R markdown quickly 3.2 Rstudio shortcuts 3.3 Load R packages to your library 3.4 The data to visualise 3.5 Code style", " Chapter 3 Setup 3.1 Navigate R markdown quickly Instead of scrolling up and down your R Markdown code looking for certain chunk, jump quickly to the right bit of code you want to edit in RStudio using the document outline. View the doc outline in one of three ways: Hold down Ctrl+Shift+O. Click the top right icon in the code pane. Left click on the bottom bar of the R markdown file. The gif below shows these three methods. It was recorded with ScreenToGif. I found it super easy to use and so gave a donation. 3.2 Rstudio shortcuts Another tip to speed up coding in RStudio is to use shortcuts. Here is the full list of RStudio shorcuts. I use Ctrl+Shift+M in Windows (Cmd+Shift+M in Mac) to insert a pipe (%&gt;%) with spaces. This makes tidyverse coding fast. I also use Alt+- in Windows (Option+- in Mac) to create the assign operator (&lt;-). 3.3 Load R packages to your library Here are all the R packages used in this book. # data vis https://www.htmlwidgets.org/index.html library(ggplot2) # static charts - amazing variety library(plotly) # interactive charts library(apexcharter) # much like the paid for highchater js library. Powerful library(rayshader) # 3D charts library(trelliscopejs) # small multiples library(dygraphs) # awesome interactive timeseries # ggplot extensions https://www.ggplot2-exts.org/gallery/ library(scales) # improve your scales library(gganimate) # animate your ggplot library(png) # dunno library(directlabels) # for directly labelling lines for example library(gghighlight) # label points of interest on your charts library(ggrepel) # move labels so they don&#39;t overlap library(glue) # # colours library(RColorBrewer) # ready to use colour pallets library(prismatic) # palettes and ways to tweak an entier pallete # tables library(kableExtra) # attractive static tables library(formattable) # colour tables. Like Excel&#39;s conditional formattinng library(rpivotTable) # like Excel&#39;s pivot table library(DT) # awesome interactive tables # Quality Assurance library(tidylog) # great for QA on the fly # wrangling / munging / manipulating library(tidyverse) # loads of useful packages in one library(crosstalk) # link html widgets # time series tools library(anytime) # convert text into the right date type library(xts) # convert to time series for dygraphs library(tsbox) # easily convert to time series # sample data library(mosaicData) # sample data 3.4 The data to visualise A lot of data visualisation looks at values changing over time. For this reason, instead of using a built in data set like iris or mtcars we are going to mostly use the Texas housing sales time series data built into ggplot. You may want to find more open data sets to develop your data vis skills. If so, take a look at this carefully curated and comprehensive list of R datasets. The only manipulation we will do to the Texas housing sales data is create a real date using lubridate. We’ll also use tidylog with dplyr. Tidylog is an easy way to include fast basic Quality Assurance into your coding process. You just replace dplyr verbs with the same verb in tidylog. The tidylog version tells you what each dplyr verb has done to your data in terms of the number and percentage of changes. For example, how many rows are dropped or added by filters or joins, or what percentage of values changed after a mutate. # create a data frame with a real date for plotting df &lt;- ggplot2::txhousing %&gt;% tidylog::mutate(date = lubridate::make_date(year = year, month = month, day =1)) ## mutate: changed 8,602 values (100%) of &#39;date&#39; (0 new NA) Let’s also create a data frame with fewer cities to make some plots less crowded later. Here we select only cities where the maximum number in any month is 800 or more. # reduce the number of cities for simpler plots df_red &lt;- df %&gt;% dplyr::group_by(city) %&gt;% tidylog::mutate(sales_max = base::max(sales)) %&gt;% dplyr::ungroup() %&gt;% tidylog::filter(sales_max &gt;= 500) ## mutate (grouped): new variable &#39;sales_max&#39; with 27 unique values and 43% NA ## filter: removed 6,171 rows (72%), 2,431 rows remaining Hold on. Look! Read the tidylog messages above. It tells us the percentage of values that are “NA”. The mutate must have gone wrong as 43% are NA. Well spotted tidylog. We correct it below by removing NAs from the maximum sales value using na.rm = TRUE. # reduce the number of cities for simpler plots df_red &lt;- df %&gt;% dplyr::group_by(city) %&gt;% tidylog::mutate(sales_max = base::max(sales, na.rm = TRUE)) %&gt;% dplyr::ungroup() %&gt;% tidylog::filter(sales_max &gt;= 500) ## mutate (grouped): new variable &#39;sales_max&#39; with 45 unique values and 0% NA ## filter: removed 5,984 rows (70%), 2,618 rows remaining We know the code above has been corrected as its tidylog message now tells us there are 0% that are NA. Let’s also look at the top few rows of the data frame we created using a kableExtra table. The Tables chapter later on in this book describes different table methods in more detail. kableExtra::kable(utils::head(df)) city year month sales volume median listings inventory date Abilene 2000 1 72 5380000 71400 701 6.3 2000-01-01 Abilene 2000 2 98 6505000 58700 746 6.6 2000-02-01 Abilene 2000 3 130 9285000 58100 784 6.8 2000-03-01 Abilene 2000 4 98 9730000 68600 785 6.9 2000-04-01 Abilene 2000 5 141 10590000 67300 794 6.8 2000-05-01 Abilene 2000 6 156 13910000 66900 780 6.6 2000-06-01 3.5 Code style 3.5.1 Include the package and parameter names To make your code more transparent use the package name before every function. Even base R functions. When I started learning R using other people’s code. I got confused where functions came from. Particularly when the functions came from many packages (including base functions) and even their own functions. It made their code appear more complex and intimidating than it should have. Another benefit of typing the package name first you can hit the tab key at the end of the double colon and browse all the functions in that package. Also, try highlighting a function and its package name then hit the F1 key to see the help pages for that function. While hitting the F2 key can be a quick way to see all the possible parameters in a function including default values. Finally, name the arguments in each function instead of relying on the expected argument order. Your code will be quicker to understand when we know exactly what arguments are being set without reading the help page. ggplot2:: ggrepel::geom_text_repel(mapping = ) 3.5.2 One line does one thing - hit the return key a lot Ideally one line of code does one thing. Hit the return key after every pipe (%&gt;%), comma, or plus (+) and RStudio tabs will space your code out in just the right way. For example, the code below works but doesn’t follow the rules so far (package &amp; argument names and one action per line). The code is cramped, slow to understand, and can be difficult edit or re-use. ggplot(df) + geom_line(aes(date, sales, colour = city)) + ggplot2::theme_minimal() + gghighlight(max(sales) &gt; 5000, label_params = list(size = 4)) + scale_y_continuous(labels = scales::comma) + scale_x_date(date_breaks = &quot;1 year&quot;, labels = scales::date_format(&quot;%d %b %y&quot;), limits = c(as.Date(&quot;2000-01-01&quot;), as.Date(&quot;2015-07-01&quot;))) + labs(title = &quot;US Housing Sales over time&quot;, subtitle = &quot;US cities with more than 5k sales in a month&quot;, caption = &quot;Source: ggplot2 package demo data&quot;) + geom_vline(xintercept = years, linetype = 4) + theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), strip.text.x = element_text(size = 10), axis.text.x = element_text(angle = 60, hjust = 1, size = 9), legend.text = element_text(size = 12), legend.position = &quot;right&quot;, legend.direction = &quot;vertical&quot;, plot.title = element_text(size = 22, face = &quot;bold&quot;), plot.subtitle = element_text(color = &quot;grey&quot;, size = 18), plot.caption = element_text(hjust = 0, size = 12, color = &quot;darkgrey&quot;), legend.title = element_blank()) In contrast, the code below is the identical to the code above but it follows these 5 rules: Include package names before each function. Even for base functions. Name every argument you set in a function. Each line does one thing by hitting the return key after each pipe ( %&gt;% ), comma or plus symbol (+). Put spaces around equals. Use styler to automatically apply some of these rules. The benefits of following these rules are that you can more easily: Run your code top downwards in chunks adding more lines each time (like the popular ggplot flip-books I describe at bullet 11 in my collection of R guides and galleries Comment out whole lines of code or parameters in a function to understand what they are doing. Find and edit arguments in a function (e.g. a font size) Help others QA or re-use your code more quickly. Help others new to R understand what you are doing and learn faster. Avoid being a “gatekeeper” of your R knowledge and skills. Share, explain and democratise what you know. You can then move on to more complex analysis in R with an even higher value (as proposed by Richard Susskind in The Future of Professions). df %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = sales, colour = city ) + ggplot2::geom_line() + ggplot2::theme_minimal() + gghighlight::gghighlight(max(sales) &gt; 5000, label_params = list(size = 4) ) + ggplot2::scale_y_continuous(labels = scales::comma) + ggplot2::scale_x_date( date_breaks = &quot;1 year&quot;, labels = scales::date_format(&quot;%d %b %y&quot;), limits = c( as.Date(&quot;2000-01-01&quot;), as.Date(&quot;2015-07-01&quot;) ) ) + ggplot2::labs( title = &quot;US Housing Sales over time&quot;, subtitle = &quot;US cities with more than 5k sales in a month&quot;, caption = &quot;Source: ggplot2 package demo data&quot; ) + ggplot2::geom_vline( xintercept = years, linetype = 4 ) + ggplot2::theme( panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), strip.text.x = element_text(size = 10), axis.text.x = element_text( angle = 60, hjust = 1, size = 9 ), legend.text = element_text(size = 12), legend.position = &quot;right&quot;, legend.direction = &quot;vertical&quot;, plot.title = element_text( size = 22, face = &quot;bold&quot; ), plot.subtitle = element_text( color = &quot;grey&quot;, size = 18 ), plot.caption = element_text( hjust = 0, size = 12, color = &quot;darkgrey&quot; ), legend.title = element_blank() ) Note this layout differs from the layered gramar of graphics code template below. ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;( mapping = aes(&lt;MAPPINGS&gt;), stat = &lt;STAT&gt;, position = &lt;POSITION&gt; ) + &lt;COORDINATE_FUNCTION&gt; + &lt;FACET_FUNCTION&gt; My preference is to mentally view this as data being poured into ggplot through the pipe, then we tell it which columns to map, then the geom, followed by the same co-ordinate and facet function as Wickham recommends. This is inspired by the code layout of the many flipbook guides I describe at bullet 11 here. &lt;DATA&gt; %&gt;% ggplot2::ggplot() + ggplot2::aes(&lt;MAPPINGS&gt;) + ggplot2::&lt;GEOM_FUNCTION&gt;( stat = &lt;STAT&gt;, position = &lt;POSITION&gt; ) + &lt;COORDINATE_FUNCTION&gt; + &lt;FACET_FUNCTION&gt; "],
["exploratory-data-analysis.html", "Chapter 4 Exploratory Data Analysis 4.1 Start with dplyr counts and summaries in console 4.2 Plot data points with geom_point() 4.3 Facet by categories 4.4 Facet interactively (trelliscopejs) 4.5 Loop to plot every category separately 4.6 Polish your final plot", " Chapter 4 Exploratory Data Analysis 4.1 Start with dplyr counts and summaries in console David Robinson often starts exploring data with simple counts in the console. Here we don’t use the package name (so breaking the rule I just told you) in the console so we can type more quickly and explore the data with dplyr verbs faster. df %&gt;% count(city) %&gt;% View() df %&gt;% count(city, year, month) %&gt;% View()# df %&gt;% group_by(city) %&gt;% summarise(vol_max = max(volume, na.rm = T)) %&gt;% arrange(desc(vol_max)) %&gt;% View() 4.2 Plot data points with geom_point() After using dplyr count(), group_by() and summarise(), try plotting all data points with ggplot2::geom_point(). It almost NEVER fails to show you what’s going on quickly and is unlikely to return errors. ggplot2::geom_point() is the minimum and most reliable ggplot plot type (or geom) to start with. Let’s look at all the values of sales for each date. df %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = sales ) + ggplot2::geom_point() ## Warning: Removed 568 rows containing missing values (geom_point). Now let’s look at the individual sales values over the values of the city column. df %&gt;% ggplot2::ggplot() + ggplot2::aes( x = sales, y = city ) + ggplot2::geom_point() ## Warning: Removed 568 rows containing missing values (geom_point). The points make very dark lines. This is where we can’t see separate data points as so many overlap. This is known as over plotting. Solve this by replacing geom_point() with geom_jitter(). This randomly “jitters” the data points around so that they are less likely to overlap. Sometimes there are so many data points the jitter is not enough to reduce over plotting. We can also make the dots lighter using a a parameter called alpha. The lower the value of alpha the fainter the data points. df %&gt;% ggplot2::ggplot() + ggplot2::aes( x = sales, y = city ) + ggplot2::geom_jitter(alpha = 0.01) ## Warning: Removed 568 rows containing missing values (geom_point). Hadley Wickham has a few more tricks to solve over plotting in the overplotting chapter of his ggplot book. We all know sales of most things vary by the time of the year. So let’s now put date on the x axis, make city the colour, and because the data is over time we can join the data points using ggplot2::geom_line(). We’re also using the reduced data set with fewer cities so the plot is less crowded with fewer lines. df_red %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = sales, colour = city ) + ggplot2::geom_line() ## Warning: Removed 1 rows containing missing values (geom_path). Beautiful. While sales have very different volumes in different cities we can see they follow the same seasonal pattern. To bring the patterns of sales closer to each other and easier to compare we can transform the sales value by taking its log. This is Hadley Wickham’s approach in ggplot2: Elegant Graphics for Data Analysis. He goes on to model the data by fitting a linear model between the log of sales and the month, then plotting the residuals (i.e. the change in sales not explained by the month). This removes the strong seasonal effects. We will take a simpler approach to reducing the seasonal effect in the final plot in this chapter by presenting the entire series zoomed out with years clearly marked. df_red %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = base::log(sales), colour = city ) + ggplot2::geom_line() ## Warning: Removed 1 rows containing missing values (geom_path). 4.3 Facet by categories Another logical step after showing categories by colour is to use “small multiples”. This is a fancy way of saying draw a chart for each value in one or more columns then look at all the plots at once. Usually in a grid. An important setting for facets is to specify scales = “free” so each small plot has its own scale. This lets us more easily spot interesting differences in the patterns over time between plots. df_red %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = sales, colour = city ) + ggplot2::geom_line() + ggplot2::facet_wrap(~city, scales = &quot;free&quot; ) ## Warning: Removed 1 rows containing missing values (geom_path). 4.4 Facet interactively (trelliscopejs) An interactive way to facet and explore your data with a GUI in R is trelliscopejs. Below we facet all the Texas cities in a trelliscope web page. Have a play with all the settings and see what it does. df %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = sales ) + ggplot2::geom_line() + trelliscopejs::facet_trelliscope(~city, scales = &quot;free&quot;, nrow = 3, ncol = 5, self_contained = TRUE, # as_plotly = TRUE, # not working plotly_cfg = list(displayModeBar = FALSE) ) 4.5 Loop to plot every category separately To study each city as a full single chart automatically we can loop through our data. We can nest a dataframe for each city into one dataframe. Then loop through each nested dataframe creating a plot for each one. First we use dplyr::group_by() for city and then nest by that grouping using tidyr::nest(). df_red_nest &lt;- df_red %&gt;% dplyr::group_by(city) %&gt;% tidyr::nest() This shows us what a nested dataframe looks like. df_red_nest %&gt;% View() We can also view one of the nested data frames using square brackets. Think of the numbers in the square brackets like the co-ordinates in Excel. The first number is the column position and the second number is the row position. df_red_nest[[2]][[1]] %&gt;% View() We can now add a plot to each nested data frame. We use purrr::map2(). This is a compact way to loop through two arguments in a function. In this case the values being set are the data set inside each row and the value of city column. df_red_nest &lt;- df_red_nest %&gt;% dplyr::mutate(plot = purrr::map2( .x = data, .y = city, ~ ggplot2::ggplot( data = .x, aes( x = date, y = sales ) ) + ggtitle(glue::glue(&quot;Plot of {.y}&quot;)) + geom_line() )) Take a look at the new nested data frame with a new column added containing a plot for each city. df_red_nest %&gt;% View() Let’s also look at the information held for one of the plots, again using values in square brackets. The code below shows you that the plot is a series of nested lists that describe every element of the plot. df_red_nest[[3]][[1]] %&gt;% View() Finally, let’s print every plot quite simply with this code. Show all the looped prints print(df_red_nest$plot) ## [[1]] ## ## [[2]] ## ## [[3]] ## ## [[4]] ## ## [[5]] ## Warning: Removed 1 rows containing missing values (geom_path). ## ## [[6]] ## ## [[7]] ## ## [[8]] ## ## [[9]] ## ## [[10]] ## ## [[11]] ## ## [[12]] ## ## [[13]] ## ## [[14]] 4.6 Polish your final plot We now have a bare minimum Exploratory Data Analysis toolkit of how to explore the data both wtih dplyr counts from the console and with points and lines in ggplot. We will soon be ready to select a plot that tells an interesting story we have found by exploring the data. But adding all the bells and whistles to make the plot customer or publication ready can and does take a long time. So this polish shouldn’t be part of your exploratory data analysis. Also, make sure the polishing is done with the clean code style recommended earlier. It’s far quicker then to comment out or tweak the values of each part of your plot until it looks just right. Clean code is faster to iterate. The plot below isn’t perfect. There may be things you want to change depending on what story you want to tell or your personal style. How did I create it? By Googling for what I wanted to do (e.g. “ggplot remove axis grid lines”), copying the code from a stackoverflow answer, and putting it into a clear structure as below. Many of the tweaks or polish will be to ggplot2::theme() or ggplot2::scale… But are you really going to remember what do to each time? I try not to worry about remembering how to do it and just focus on how I want it to look and get absorbed in the creation and satisfaction of it gradually improving. After you have built a few of your own charts with clear code you will soon be using your own plots as a store of code chunks to re-use. Be prepared for this tweaking and polishing to take you much longer than you planned. Always. # a list of dates to add vertical lines to the plot years &lt;- base::seq.Date( from = as.Date(&quot;2000-01-01&quot;), to = as.Date(&quot;2015-01-01&quot;), by = &quot;years&quot; ) p &lt;- df %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = sales, colour = city ) + ggplot2::geom_line(size = 1) + ggplot2::theme_minimal() + gghighlight::gghighlight(base::max(sales) &gt; 5000, # highlight only cities with higher sales label_params = list(size = 4) ) + ggplot2::scale_y_continuous(labels = scales::comma) + ggplot2::scale_x_date( date_breaks = &quot;1 year&quot;, labels = scales::date_format(&quot;%b %y&quot;), limits = c( as.Date(&quot;2000-01-01&quot;), as.Date(&quot;2015-07-01&quot;) ) ) + ggplot2::labs( title = &quot;Texas Housing Sales&quot;, subtitle = &quot;Texas cities with more than 5,000 sales in any month&quot;, caption = &quot;Source: ggplot2 built in txhousing data set&quot;, x = &quot;Month&quot;, y = &quot;Volume of Sales&quot; ) + ggplot2::geom_vline( xintercept = years, linetype = 4 ) + ggplot2::theme( panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), strip.text.x = element_text(size = 10), axis.text.x = element_text( angle = 60, hjust = 1, size = 9 ), legend.text = element_text(size = 12), legend.position = &quot;right&quot;, legend.direction = &quot;vertical&quot;, plot.title = element_text( size = 22, face = &quot;bold&quot; ), plot.subtitle = element_text( color = &quot;grey&quot;, size = 18 ), plot.caption = element_text( hjust = 0, size = 12, color = &quot;darkgrey&quot; ), legend.title = element_blank() ) ## label_key: city ggplot2::ggsave(file=&quot;texas.svg&quot;, device = &quot;svg&quot;, plot=p) ## Saving 7 x 5 in image ## Warning: package &#39;gdtools&#39; was built under R version 3.6.1 ## Warning: Removed 430 rows containing missing values (geom_path). "],
["why-start-with-geom-point.html", "Chapter 5 Why start with geom_point() ? 5.1 ggplot is famed for annoying errors 5.2 Retreat to geom_point() 5.3 geom_jitter() and geom_boxplot() is better 5.4 Final choice: geom_jitter() and stat_summary()", " Chapter 5 Why start with geom_point() ? 5.1 ggplot is famed for annoying errors It’s a good idea to start with ggplot2::geom_point() because it works for for both raw and summarised data straight away. This both speeds up EDA and makes ggplot less intimidating for beginners. Let’s explore more granular data to trigger some common errors using the marriage data from the mosaicData package. We do a little data cleaning on the ceremony date and on the column that describes any previous marriages. marriage &lt;- mosaicData::Marriage %&gt;% tidylog::mutate(prev_marriage = as.character(prevconc)) %&gt;% tidylog::mutate(prev_marriage = case_when( is.na(prev_marriage) ~ &quot;First Time&quot;, TRUE ~ prev_marriage )) %&gt;% tidylog::mutate(ceremonydate1 = lubridate::parse_date_time(ceremonydate, &quot;mdy&quot;)) ## mutate: new variable &#39;prev_marriage&#39; with 3 unique values and 49% NA ## mutate: changed 48 values (49%) of &#39;prev_marriage&#39; (48 fewer NA) ## mutate: new variable &#39;ceremonydate1&#39; with 49 unique values and 0% NA kableExtra::kable(utils::head(marriage %&gt;% dplyr::select(ceremonydate1, person, prev_marriage, age, race, sign))) ceremonydate1 person prev_marriage age race sign 1996-11-09 Groom First Time 32.60274 White Aries 1996-11-12 Groom Divorce 32.29041 White Leo 1996-11-27 Groom Divorce 34.79178 Hispanic Pisces 1996-12-07 Groom Divorce 40.57808 Black Gemini 1996-12-14 Groom First Time 30.02192 White Saggitarius 1996-12-26 Groom First Time 26.86301 White Pisces In our previous data set we had one value of sales say per city and date. This meant geom_line worked fine as long as both the date and the city were in the “aesthetics” of the plot (e.g. x,y, colour, category, or facet being the most common). A common way to trigger ggplot2 errors or create confusing plots is using bar or line charts before the data is summarised. For example, a line chart is inappropriate with many ages per previous marriage status. marriage %&gt;% ggplot2::ggplot() + ggplot2::aes( x = prev_marriage, y = age ) + ggplot2::geom_line() And using a bar chart instead returns an error. marriage %&gt;% ggplot2::ggplot() + ggplot2::aes( x = prev_marriage, y = age ) + ggplot2::geom_bar() ## Error: stat_count() must not be used with a y aesthetic. ggplot2::geom_col() or ggplot2::geom_bar(stat = “identity”) will plot the data for us but it’s showing the sum of all the ages in each group which doesn’t tells us much of interest. marriage %&gt;% ggplot2::ggplot() + ggplot2::aes( x = prev_marriage, y = age ) + ggplot2::geom_bar(stat = &quot;identity&quot;) #ggplot2::geom_col() A column may end up being the final plot choice, but for fast EDA let’s avoid bars, lines and columns and retreat to our friend geom_point() Another reason to avoid bars to begin with is they do a statistical transformation without us realising it. This is explained in the Statistical Transformations chapter of R for Data Science. 5.2 Retreat to geom_point() Let’s go back to using ggplot2::geom_point() and facet by person. marriage %&gt;% ggplot2::ggplot() + ggplot2::aes( x = prev_marriage, y = age ) + ggplot2::facet_wrap(~person) + ggplot2::geom_point(alpha = 0.3) Immediately this is interesting as we see the ages of brides and grooms and by whether they are getting married for the first time or if they are divorced or widowed. As well as data points, We can also experiment with different ways of showing these distributions. Hadley Wickham’s ggplot2: Elegant Graphics for Data Analysis has a good short chapter on displaying distributions. First let’s try a histogram. marriage %&gt;% ggplot2::ggplot() + ggplot2::aes(x = age) + ggplot2::facet_wrap(~ person + prev_marriage) + ggplot2::geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. We get a warning about the bin width. We can set the bin width by hand, say 6 bins. marriage %&gt;% ggplot2::ggplot() + ggplot2::aes(x = age) + ggplot2::facet_wrap(~ person + prev_marriage) + ggplot2::geom_histogram(bins = &quot;6&quot;) This looks better but is there an optimum bin number? There is probably no optimum width as discussed in this stackexchange question. Or we might try the density distribution with ggplot2::geom_density() p &lt;- marriage %&gt;% ggplot2::ggplot() + ggplot2::aes( x = age, fill = prev_marriage ) + ggplot2::geom_density(adjust = 1, alpha = 0.5, colour = NA) + ggplot2::facet_wrap(vars(person), ncol = 1) + ggplot2::theme_minimal() directlabels::direct.label(p, list(&quot;top.points&quot;, cex = .75, hjust = 0, vjust = -0.2)) 5.3 geom_jitter() and geom_boxplot() is better But with so few data points ggplot2::box_plot() with the data points overlaid with ggplot2::geom_jitter() works well as a data story. marriage %&gt;% ggplot2::ggplot() + ggplot2::aes( x = prev_marriage, y = age ) + ggplot2::facet_wrap(~person) + ggplot2::geom_boxplot(alpha = 0.8) + ggplot2::geom_jitter(width = 0.1, alpha = 0.3) + ggplot2::theme_light() 5.4 Final choice: geom_jitter() and stat_summary() Until recently the chart above would have been my final plot. Until I saw the fantastic “evolution of a ggplot” post. In the gif below you can see they also start with a boxplot but their final choice is ggplot2::geom_jitter() and ggplot2::stat_summary(). The post gives the full code in a gradual code story presented like the ggplot flip books. And here is their final plot at the end of the gif above. Inspired by that plot and its code this final plot below on the marriage data is more engaging than the boxplot before. It tells the story more clearly with little or no explanation needed. Much like a chart in a good online newspaper. p &lt;- marriage %&gt;% dplyr::group_by(person,prev_marriage) %&gt;% dplyr::mutate(pers_prev_avg = median(age)) %&gt;% dplyr::ungroup() %&gt;% dplyr::group_by(person) %&gt;% dplyr::mutate(pers_avg = median(age)) %&gt;% dplyr::ungroup() %&gt;% ggplot2::ggplot() + ggplot2::aes( x = prev_marriage, y = age, colour = prev_marriage ) + ggplot2::facet_wrap(~person, ncol = 1) + ggplot2::stat_summary(fun.y = median, geom = &quot;point&quot;, size = 4, alpha = 0.8) + ggplot2::stat_summary(aes(label= paste( round(..y..,1), &quot; years&quot;)), fun.y=median, colour = &quot;black&quot;, geom=&quot;text&quot;, size=3, vjust = -1.5) + ggplot2::geom_hline(aes(yintercept = pers_avg), color = &quot;gray70&quot;, size = 0.6) + ggplot2::geom_text(aes(x = 0.7, y = pers_avg, label = paste(person,&quot; average age&quot;, round(pers_avg,0)), #colour = &quot;white&quot;, hjust = 1.05), colour = &quot;black&quot;, size = 3) + ggplot2::geom_segment(aes(x = prev_marriage, xend = prev_marriage, y = pers_avg, yend = pers_prev_avg), size = 0.8) + ggplot2::geom_jitter(size = 2, alpha = 0.4, width = 0.2) + ggplot2::scale_color_brewer(type = &quot;qual&quot;, palette = &quot;Dark2&quot;) + ggplot2::theme_minimal()+ ggplot2::theme( plot.title = element_text(size = 14, hjust = 0), legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), panel.grid = element_blank(), strip.text.x = element_text(size = 12, hjust = 0.1), panel.border = element_rect(colour = &quot;black&quot;, fill=NA, size = 0.1) ) + ggplot2::scale_y_continuous(breaks=base::seq(0,100,10)) + ggplot2::coord_flip() + ggplot2::labs( title = &quot;Age* of brides and grooms by previous marriage status&quot;, caption = &quot;*The average ages are the median. This is the middle age among all ages.\\n i.e. 50% of ages fall below the median value and 50% above it&quot; ) ggplot2::ggsave(file=&quot;marriage.svg&quot;, device = &quot;svg&quot;, plot=p) ## Saving 7 x 5 in image In the plot above we can see grooms are older on average overall. But do they tend to be older or younger than their bride within each marriage? As a final quick exploratory chart we put the ceremony ID on the x axis, use geom_point() for age, and give the data points for brides and grooms their own colour. As we have added the ceremony ID (bookpageID) to the group aesthetic, when we add geom_line this creates a line that joins the two data points for each marriage. We can see that most grooms are older than most brides in each ceremony. marriage %&gt;% ggplot2::ggplot() + ggplot2::aes(x = bookpageID, y = age, colour = person, group = bookpageID) + ggplot2::geom_point() + ggplot2::geom_line() + ggplot2::coord_flip() "],
["interactive-plots.html", "Chapter 6 Interactive plots 6.1 Plotly cheat: convert ggplot with plotly::ggplotly() 6.2 Edit ggplot conversion with plotly::plotly_build() 6.3 Plotly most basic 6.4 plotly (a few more settings) 6.5 plotly (bells &amp; whistles) 6.6 crosstalk 6.7 apexchater simple 6.8 apexchater with bells &amp; whistles 6.9 dygraphs for time series data 6.10 dygraphs bells &amp; whistles", " Chapter 6 Interactive plots 6.1 Plotly cheat: convert ggplot with plotly::ggplotly() Interactive plots can help both you and your audience find or tell stories in data faster and more enjoyably. Carson Sievert maintains the Plotly R package. He describes how interactive plots can “augment” your data exploration but only if we an “iterate quickly”. with plotly you can sometimes move faster than ggplot with fewer errors. A quick way to use Plotly builds on your ggplot skills. Put a ggplot through a plotly function called plotly::ggplotly() like this. p &lt;- df_red %&gt;% ggplot2::ggplot() + ggplot2::aes(x = date, y = sales, colour = city) + ggplot2::geom_line() plotly::ggplotly(p) 6.2 Edit ggplot conversion with plotly::plotly_build() Often, even when you have played around with how the original ggplot looks, the plotly::ggplotly() function doesn’t quite convert to the plot you want. If that happens try using plotly::plotly_build() instead of plotly::ggplotly(). This gives you more control over the conversion from ggplot to plotly. Plotly build is a nested R list which plotly.js uses to create the web graphic. This diagram from chapter 2 of Carson Sievert’s Interactive web-based data visualization with R, plotly, and shiny explains that relationship. plotly::plotly_build() is a nested list of all the settings. First, here is how we create a plotly_build() object we can edit. p &lt;- df_red %&gt;% ggplot2::ggplot() + ggplot2::aes(x = date, y = sales, colour = city) + ggplot2::geom_line() p_build &lt;- plotly::plotly_build(p) p_build We can alter any of the settings in p_build by using utils::str(). The str function compactly displays the structure of any R object. Show full structure of p_build utils::str(p_build) ## List of 8 ## $ x :List of 10 ## ..$ data :List of 14 ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 241 337 493 456 498 491 446 507 407 392 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 241&lt;br /&gt;city: Arlington&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 337&lt;br /&gt;city: Arlington&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 493&lt;br /&gt;city: Arlington&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 456&lt;br /&gt;city: Arlington&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(248,118,109,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Arlington&quot; ## .. .. ..$ legendgroup: chr &quot;Arlington&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 1025 1277 1603 1556 1980 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 1025&lt;br /&gt;city: Austin&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 1277&lt;br /&gt;city: Austin&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 1603&lt;br /&gt;city: Austin&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 1556&lt;br /&gt;city: Austin&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(227,137,0,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Austin&quot; ## .. .. ..$ legendgroup: chr &quot;Austin&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 244 375 391 421 533 561 449 471 397 376 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 244&lt;br /&gt;city: Bay Area&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 375&lt;br /&gt;city: Bay Area&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 391&lt;br /&gt;city: Bay Area&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 421&lt;br /&gt;city: Bay Area&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(196,154,0,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Bay Area&quot; ## .. .. ..$ legendgroup: chr &quot;Bay Area&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 464 668 849 847 1031 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 464&lt;br /&gt;city: Collin County&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 668&lt;br /&gt;city: Collin County&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 849&lt;br /&gt;city: Collin County&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 847&lt;br /&gt;city: Collin County&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(153,168,0,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Collin County&quot; ## .. .. ..$ legendgroup: chr &quot;Collin County&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 182 219 351 288 317 339 287 398 307 274 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 182&lt;br /&gt;city: Corpus Christi&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 219&lt;br /&gt;city: Corpus Christi&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 351&lt;br /&gt;city: Corpus Christi&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 288&lt;br /&gt;city: Corpus Christi&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(83,180,0,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Corpus Christi&quot; ## .. .. ..$ legendgroup: chr &quot;Corpus Christi&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 2286 3247 4244 3977 4545 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 2286&lt;br /&gt;city: Dallas&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 3247&lt;br /&gt;city: Dallas&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 4244&lt;br /&gt;city: Dallas&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 3977&lt;br /&gt;city: Dallas&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(0,188,86,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Dallas&quot; ## .. .. ..$ legendgroup: chr &quot;Dallas&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 313 423 570 529 639 677 638 618 488 460 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 313&lt;br /&gt;city: Denton County&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 423&lt;br /&gt;city: Denton County&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 570&lt;br /&gt;city: Denton County&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 529&lt;br /&gt;city: Denton County&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(0,192,148,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Denton County&quot; ## .. .. ..$ legendgroup: chr &quot;Denton County&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 306 346 492 382 459 486 422 538 382 392 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 306&lt;br /&gt;city: El Paso&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 346&lt;br /&gt;city: El Paso&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 492&lt;br /&gt;city: El Paso&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 382&lt;br /&gt;city: El Paso&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(0,191,196,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;El Paso&quot; ## .. .. ..$ legendgroup: chr &quot;El Paso&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 343 466 657 593 735 790 753 717 593 547 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 343&lt;br /&gt;city: Fort Bend&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 466&lt;br /&gt;city: Fort Bend&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 657&lt;br /&gt;city: Fort Bend&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 593&lt;br /&gt;city: Fort Bend&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(0,182,235,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Fort Bend&quot; ## .. .. ..$ legendgroup: chr &quot;Fort Bend&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 325 469 588 487 630 648 548 638 524 539 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 325&lt;br /&gt;city: Fort Worth&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 469&lt;br /&gt;city: Fort Worth&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 588&lt;br /&gt;city: Fort Worth&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 487&lt;br /&gt;city: Fort Worth&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(6,164,255,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Fort Worth&quot; ## .. .. ..$ legendgroup: chr &quot;Fort Worth&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 2653 3687 4733 4364 5215 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 2653&lt;br /&gt;city: Houston&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 3687&lt;br /&gt;city: Houston&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 4733&lt;br /&gt;city: Houston&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 4364&lt;br /&gt;city: Houston&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(165,138,255,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Houston&quot; ## .. .. ..$ legendgroup: chr &quot;Houston&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 259 309 420 383 427 492 463 460 346 321 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 259&lt;br /&gt;city: Montgomery County&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 309&lt;br /&gt;city: Montgomery County&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 420&lt;br /&gt;city: Montgomery County&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 383&lt;br /&gt;city: Montgomery County&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(223,112,248,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;Montgomery County&quot; ## .. .. ..$ legendgroup: chr &quot;Montgomery County&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 344 531 717 590 746 727 686 717 551 556 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 344&lt;br /&gt;city: NE Tarrant County&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 531&lt;br /&gt;city: NE Tarrant County&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 717&lt;br /&gt;city: NE Tarrant County&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 590&lt;br /&gt;city: NE Tarrant County&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(251,97,215,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;NE Tarrant County&quot; ## .. .. ..$ legendgroup: chr &quot;NE Tarrant County&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## .. ..$ :List of 14 ## .. .. ..$ x : num [1:187] 10957 10988 11017 11048 11078 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ y : num [1:187] 820 1075 1433 1263 1574 ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ text : chr [1:187] &quot;date: 2000-01-01&lt;br /&gt;sales: 820&lt;br /&gt;city: San Antonio&quot; &quot;date: 2000-02-01&lt;br /&gt;sales: 1075&lt;br /&gt;city: San Antonio&quot; &quot;date: 2000-03-01&lt;br /&gt;sales: 1433&lt;br /&gt;city: San Antonio&quot; &quot;date: 2000-04-01&lt;br /&gt;sales: 1263&lt;br /&gt;city: San Antonio&quot; ... ## .. .. .. ..- attr(*, &quot;apiSrc&quot;)= logi TRUE ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..$ mode : chr &quot;lines&quot; ## .. .. ..$ line :List of 3 ## .. .. .. ..$ width: num 1.89 ## .. .. .. ..$ color: chr &quot;rgba(255,102,168,1)&quot; ## .. .. .. ..$ dash : chr &quot;solid&quot; ## .. .. ..$ hoveron : chr &quot;points&quot; ## .. .. ..$ name : chr &quot;San Antonio&quot; ## .. .. ..$ legendgroup: chr &quot;San Antonio&quot; ## .. .. ..$ showlegend : logi TRUE ## .. .. ..$ xaxis : chr &quot;x&quot; ## .. .. ..$ yaxis : chr &quot;y&quot; ## .. .. ..$ hoverinfo : chr &quot;text&quot; ## .. .. ..$ frame : chr NA ## ..$ layout :List of 12 ## .. ..$ margin :List of 4 ## .. .. ..$ t: num 26.2 ## .. .. ..$ r: num 7.31 ## .. .. ..$ b: num 40.2 ## .. .. ..$ l: num 48.9 ## .. ..$ plot_bgcolor : chr &quot;rgba(235,235,235,1)&quot; ## .. ..$ paper_bgcolor: chr &quot;rgba(255,255,255,1)&quot; ## .. ..$ font :List of 3 ## .. .. ..$ color : chr &quot;rgba(0,0,0,1)&quot; ## .. .. ..$ family: chr &quot;&quot; ## .. .. ..$ size : num 14.6 ## .. ..$ xaxis :List of 28 ## .. .. ..$ domain : num [1:2] 0 1 ## .. .. ..$ automargin : logi TRUE ## .. .. ..$ type : chr &quot;linear&quot; ## .. .. ..$ autorange : logi FALSE ## .. .. ..$ range : num [1:2] 10674 16900 ## .. .. ..$ tickmode : chr &quot;array&quot; ## .. .. ..$ ticktext : chr [1:4] &quot;2000&quot; &quot;2005&quot; &quot;2010&quot; &quot;2015&quot; ## .. .. ..$ tickvals : Named num [1:4] 10957 12784 14610 16436 ## .. .. .. ..- attr(*, &quot;names&quot;)= chr [1:4] &quot;2000&quot; &quot;2005&quot; &quot;2010&quot; &quot;2015&quot; ## .. .. ..$ categoryorder : chr &quot;array&quot; ## .. .. ..$ categoryarray : chr [1:4] &quot;2000&quot; &quot;2005&quot; &quot;2010&quot; &quot;2015&quot; ## .. .. ..$ nticks : logi NA ## .. .. ..$ ticks : chr &quot;outside&quot; ## .. .. ..$ tickcolor : chr &quot;rgba(51,51,51,1)&quot; ## .. .. ..$ ticklen : num 3.65 ## .. .. ..$ tickwidth : num 0.664 ## .. .. ..$ showticklabels: logi TRUE ## .. .. ..$ tickfont :List of 3 ## .. .. .. ..$ color : chr &quot;rgba(77,77,77,1)&quot; ## .. .. .. ..$ family: chr &quot;&quot; ## .. .. .. ..$ size : num 11.7 ## .. .. ..$ tickangle : num 0 ## .. .. ..$ showline : logi FALSE ## .. .. ..$ linecolor : logi NA ## .. .. ..$ linewidth : num 0 ## .. .. ..$ showgrid : logi TRUE ## .. .. ..$ gridcolor : chr &quot;rgba(255,255,255,1)&quot; ## .. .. ..$ gridwidth : num 0.664 ## .. .. ..$ zeroline : logi FALSE ## .. .. ..$ anchor : chr &quot;y&quot; ## .. .. ..$ title :List of 2 ## .. .. .. ..$ text: chr &quot;date&quot; ## .. .. .. ..$ font:List of 3 ## .. .. .. .. ..$ color : chr &quot;rgba(0,0,0,1)&quot; ## .. .. .. .. ..$ family: chr &quot;&quot; ## .. .. .. .. ..$ size : num 14.6 ## .. .. ..$ hoverformat : chr &quot;.2f&quot; ## .. ..$ yaxis :List of 28 ## .. .. ..$ domain : num [1:2] 0 1 ## .. .. ..$ automargin : logi TRUE ## .. .. ..$ type : chr &quot;linear&quot; ## .. .. ..$ autorange : logi FALSE ## .. .. ..$ range : num [1:2] -281 9384 ## .. .. ..$ tickmode : chr &quot;array&quot; ## .. .. ..$ ticktext : chr [1:4] &quot;0&quot; &quot;2500&quot; &quot;5000&quot; &quot;7500&quot; ## .. .. ..$ tickvals : num [1:4] 0 2500 5000 7500 ## .. .. ..$ categoryorder : chr &quot;array&quot; ## .. .. ..$ categoryarray : chr [1:4] &quot;0&quot; &quot;2500&quot; &quot;5000&quot; &quot;7500&quot; ## .. .. ..$ nticks : logi NA ## .. .. ..$ ticks : chr &quot;outside&quot; ## .. .. ..$ tickcolor : chr &quot;rgba(51,51,51,1)&quot; ## .. .. ..$ ticklen : num 3.65 ## .. .. ..$ tickwidth : num 0.664 ## .. .. ..$ showticklabels: logi TRUE ## .. .. ..$ tickfont :List of 3 ## .. .. .. ..$ color : chr &quot;rgba(77,77,77,1)&quot; ## .. .. .. ..$ family: chr &quot;&quot; ## .. .. .. ..$ size : num 11.7 ## .. .. ..$ tickangle : num 0 ## .. .. ..$ showline : logi FALSE ## .. .. ..$ linecolor : logi NA ## .. .. ..$ linewidth : num 0 ## .. .. ..$ showgrid : logi TRUE ## .. .. ..$ gridcolor : chr &quot;rgba(255,255,255,1)&quot; ## .. .. ..$ gridwidth : num 0.664 ## .. .. ..$ zeroline : logi FALSE ## .. .. ..$ anchor : chr &quot;x&quot; ## .. .. ..$ title :List of 2 ## .. .. .. ..$ text: chr &quot;sales&quot; ## .. .. .. ..$ font:List of 3 ## .. .. .. .. ..$ color : chr &quot;rgba(0,0,0,1)&quot; ## .. .. .. .. ..$ family: chr &quot;&quot; ## .. .. .. .. ..$ size : num 14.6 ## .. .. ..$ hoverformat : chr &quot;.2f&quot; ## .. ..$ shapes :List of 1 ## .. .. ..$ :List of 9 ## .. .. .. ..$ type : chr &quot;rect&quot; ## .. .. .. ..$ fillcolor: logi NA ## .. .. .. ..$ line :List of 3 ## .. .. .. .. ..$ color : logi NA ## .. .. .. .. ..$ width : num 0 ## .. .. .. .. ..$ linetype: chr(0) ## .. .. .. ..$ yref : chr &quot;paper&quot; ## .. .. .. ..$ xref : chr &quot;paper&quot; ## .. .. .. ..$ x0 : num 0 ## .. .. .. ..$ x1 : num 1 ## .. .. .. ..$ y0 : num 0 ## .. .. .. ..$ y1 : num 1 ## .. ..$ showlegend : logi TRUE ## .. ..$ legend :List of 5 ## .. .. ..$ bgcolor : chr &quot;rgba(255,255,255,1)&quot; ## .. .. ..$ bordercolor: chr &quot;transparent&quot; ## .. .. ..$ borderwidth: num 1.89 ## .. .. ..$ font :List of 3 ## .. .. .. ..$ color : chr &quot;rgba(0,0,0,1)&quot; ## .. .. .. ..$ family: chr &quot;&quot; ## .. .. .. ..$ size : num 11.7 ## .. .. ..$ y : num 0.968 ## .. ..$ annotations :List of 1 ## .. .. ..$ :List of 13 ## .. .. .. ..$ text : chr &quot;city&quot; ## .. .. .. ..$ x : num 1.02 ## .. .. .. ..$ y : num 1 ## .. .. .. ..$ showarrow : logi FALSE ## .. .. .. ..$ ax : num 0 ## .. .. .. ..$ ay : num 0 ## .. .. .. ..$ font :List of 3 ## .. .. .. .. ..$ color : chr &quot;rgba(0,0,0,1)&quot; ## .. .. .. .. ..$ family: chr &quot;&quot; ## .. .. .. .. ..$ size : num 14.6 ## .. .. .. ..$ xref : chr &quot;paper&quot; ## .. .. .. ..$ yref : chr &quot;paper&quot; ## .. .. .. ..$ textangle : num 0 ## .. .. .. ..$ xanchor : chr &quot;left&quot; ## .. .. .. ..$ yanchor : chr &quot;bottom&quot; ## .. .. .. ..$ legendTitle: logi TRUE ## .. ..$ hovermode : chr &quot;closest&quot; ## .. ..$ barmode : chr &quot;relative&quot; ## ..$ config :List of 2 ## .. ..$ doubleClick : chr &quot;reset&quot; ## .. ..$ showSendToCloud: logi FALSE ## ..$ source : chr &quot;A&quot; ## ..$ attrs :List of 1 ## .. ..$ 20284e0e307:List of 4 ## .. .. ..$ x :Class &#39;formula&#39; language ~~date ## .. .. .. .. ..- attr(*, &quot;.Environment&quot;)=&lt;environment: 0x000000001a2e3b30&gt; ## .. .. ..$ y :Class &#39;formula&#39; language ~~sales ## .. .. .. .. ..- attr(*, &quot;.Environment&quot;)=&lt;environment: 0x000000001a2e3b30&gt; ## .. .. ..$ colour:Class &#39;formula&#39; language ~~city ## .. .. .. .. ..- attr(*, &quot;.Environment&quot;)=&lt;environment: 0x000000001a2e3b30&gt; ## .. .. ..$ type : chr &quot;scatter&quot; ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;plotly_eval&quot; ## ..$ cur_data : chr &quot;20284e0e307&quot; ## ..$ visdat :List of 1 ## .. ..$ 20284e0e307:function (y) ## ..$ highlight :List of 7 ## .. ..$ on : chr &quot;plotly_click&quot; ## .. ..$ persistent: logi FALSE ## .. ..$ dynamic : logi FALSE ## .. ..$ selectize : logi FALSE ## .. ..$ opacityDim: num 0.2 ## .. ..$ selected :List of 1 ## .. .. ..$ opacity: num 1 ## .. ..$ debounce : num 0 ## ..$ shinyEvents: chr [1:10] &quot;plotly_hover&quot; &quot;plotly_click&quot; &quot;plotly_selected&quot; &quot;plotly_relayout&quot; ... ## ..$ base_url : chr &quot;https://plot.ly&quot; ## ..- attr(*, &quot;TOJSON_FUNC&quot;)=function (x, ...) ## $ width : NULL ## $ height : NULL ## $ sizingPolicy :List of 6 ## ..$ defaultWidth : chr &quot;100%&quot; ## ..$ defaultHeight: num 400 ## ..$ padding : NULL ## ..$ viewer :List of 6 ## .. ..$ defaultWidth : NULL ## .. ..$ defaultHeight: NULL ## .. ..$ padding : NULL ## .. ..$ fill : logi TRUE ## .. ..$ suppress : logi FALSE ## .. ..$ paneHeight : NULL ## ..$ browser :List of 5 ## .. ..$ defaultWidth : NULL ## .. ..$ defaultHeight: NULL ## .. ..$ padding : NULL ## .. ..$ fill : logi TRUE ## .. ..$ external : logi FALSE ## ..$ knitr :List of 3 ## .. ..$ defaultWidth : NULL ## .. ..$ defaultHeight: NULL ## .. ..$ figure : logi TRUE ## $ dependencies :List of 5 ## ..$ :List of 10 ## .. ..$ name : chr &quot;typedarray&quot; ## .. ..$ version : chr &quot;0.1&quot; ## .. ..$ src :List of 1 ## .. .. ..$ file: chr &quot;htmlwidgets/lib/typedarray&quot; ## .. ..$ meta : NULL ## .. ..$ script : chr &quot;typedarray.min.js&quot; ## .. ..$ stylesheet: NULL ## .. ..$ head : NULL ## .. ..$ attachment: NULL ## .. ..$ package : chr &quot;plotly&quot; ## .. ..$ all_files : logi FALSE ## .. ..- attr(*, &quot;class&quot;)= chr &quot;html_dependency&quot; ## ..$ :List of 10 ## .. ..$ name : chr &quot;jquery&quot; ## .. ..$ version : chr &quot;1.11.3&quot; ## .. ..$ src :List of 1 ## .. .. ..$ file: chr &quot;C:/Users/lexybill/OneDrive/Documents/R/win-library/3.6/crosstalk/lib/jquery&quot; ## .. ..$ meta : NULL ## .. ..$ script : chr &quot;jquery.min.js&quot; ## .. ..$ stylesheet: NULL ## .. ..$ head : NULL ## .. ..$ attachment: NULL ## .. ..$ package : NULL ## .. ..$ all_files : logi TRUE ## .. ..- attr(*, &quot;class&quot;)= chr &quot;html_dependency&quot; ## ..$ :List of 10 ## .. ..$ name : chr &quot;crosstalk&quot; ## .. ..$ version : chr &quot;1.0.0&quot; ## .. ..$ src :List of 1 ## .. .. ..$ file: chr &quot;C:/Users/lexybill/OneDrive/Documents/R/win-library/3.6/crosstalk/www&quot; ## .. ..$ meta : NULL ## .. ..$ script : chr &quot;js/crosstalk.min.js&quot; ## .. ..$ stylesheet: chr &quot;css/crosstalk.css&quot; ## .. ..$ head : NULL ## .. ..$ attachment: NULL ## .. ..$ package : NULL ## .. ..$ all_files : logi TRUE ## .. ..- attr(*, &quot;class&quot;)= chr &quot;html_dependency&quot; ## ..$ :List of 10 ## .. ..$ name : chr &quot;plotly-htmlwidgets-css&quot; ## .. ..$ version : chr &quot;1.46.1&quot; ## .. ..$ src :List of 1 ## .. .. ..$ file: chr &quot;htmlwidgets/lib/plotlyjs&quot; ## .. ..$ meta : NULL ## .. ..$ script : NULL ## .. ..$ stylesheet: chr &quot;plotly-htmlwidgets.css&quot; ## .. ..$ head : NULL ## .. ..$ attachment: NULL ## .. ..$ package : chr &quot;plotly&quot; ## .. ..$ all_files : logi FALSE ## .. ..- attr(*, &quot;class&quot;)= chr &quot;html_dependency&quot; ## ..$ :List of 10 ## .. ..$ name : chr &quot;plotly-main&quot; ## .. ..$ version : chr &quot;1.46.1&quot; ## .. ..$ src :List of 1 ## .. .. ..$ file: chr &quot;htmlwidgets/lib/plotlyjs&quot; ## .. ..$ meta : NULL ## .. ..$ script : chr &quot;plotly-latest.min.js&quot; ## .. ..$ stylesheet: NULL ## .. ..$ head : NULL ## .. ..$ attachment: NULL ## .. ..$ package : chr &quot;plotly&quot; ## .. ..$ all_files : logi FALSE ## .. ..- attr(*, &quot;class&quot;)= chr &quot;html_dependency&quot; ## $ elementId : NULL ## $ preRenderHook:function (p, registerFrames = TRUE) ## $ jsHooks : list() ## - attr(*, &quot;class&quot;)= chr [1:2] &quot;plotly&quot; &quot;htmlwidget&quot; ## - attr(*, &quot;package&quot;)= chr &quot;plotly&quot; In the code below we set the font size of the x axis to be a huge font size of 42. We found this setting by browsing the object structure of p_build. We do this by putting a dollar at the end of p_build in the console then hit the tab key. This shows the named elements of the first nested level. We can then work our way down the nested levels by adding dollar signs and hitting tab till we find the setting we want. p_build$x$layout$xaxis$tickfont$size = 42 p_build You can see the code above has changed the font size to the massive 42 in the chart above. However, this dollar and tab key method to search through the named elements of the nested plotly object is fiddly and time consuming. The gif below shows you an easier point and click way to do it (but only in recent versions of RStudio). To do this, in the environment pane click on the magnifying glass to the right of p_build. You can then expand the nested lists as a tree and browse to find the value to change. To the right of each value is an icon. Clicking on it automatically generates the code you need to alter that value. Below is an example. p_build[[“x”]][[“layout”]][[“xaxis”]][[“tickfont”]][[“size”]] 6.3 Plotly most basic Sometimes passing a ggplot through ggplotly does not give us what we want so using plotly itself is a better option. Plotly is very forgiving. Below we don’t tell plotly what kind of chart we want (such as points or lines) but it still creates a plot. It’s our friend from ggplot, data points. It also generates lots of suggestions about what we might add. df_red %&gt;% plotly::plot_ly(x = ~date, y = ~sales, color = ~city) 6.4 plotly (a few more settings) With a few more settings we can turn it into a line plot. df_red %&gt;% plotly::plot_ly(x = ~date, y = ~sales, color = ~city, type = &#39;scatter&#39;, mode = &#39;lines&#39;) 6.5 plotly (bells &amp; whistles) Two more bells and whistles we can add are specifying the colour and a range slider. df_red %&gt;% plotly::plot_ly(x = ~date, y = ~sales, text = rownames(df_red)) %&gt;% add_lines(color = ~city, colorscale = &quot;set3&quot;) %&gt;% rangeslider() Carson Sievert has created lots of bells and whistles plotly plots on the same Texas housing data in his Plotly book. And a few more here on the Texas data. Below we re-produce some of Sievert’s plots after re-formatting the code according to our Code style rules described earlier. This makes his examples easier to understand and re-use. Try clicking on one of the lines to highlight it in this plot. # declare `city` as the SQL &#39;query by&#39; column tx &lt;- plotly::highlight_key(data = df, key = ~city) # initiate a plotly object base &lt;- plotly::plot_ly(data = tx, color = I(&quot;black&quot;)) %&gt;% dplyr::group_by(city) # create a time series of median house price base %&gt;% dplyr::group_by(city) %&gt;% plotly::add_lines(x = ~date, y = ~median) In this plot we can look at cities in isolation or highlighted against all others. # generally speaking, use a &quot;unique&quot; key for filter, # especially when you have multiple filters! tx &lt;- plotly::highlight_key(df) gg &lt;- tx %&gt;% ggplot2::ggplot() + ggplot2::aes(x = date, y = median, group = city) + ggplot2::geom_line() filter &lt;- crosstalk::bscols( crosstalk::filter_select(&quot;id&quot;, &quot;Select a city&quot;, tx, ~city), plotly::ggplotly(gg, dynamicTicks = TRUE), widths = c(12, 12) ) ## Warning in crosstalk::bscols(crosstalk::filter_select(&quot;id&quot;, &quot;Select a ## city&quot;, : Sum of bscol width units is greater than 12 tx2 &lt;- plotly::highlight_key(data = df, key = ~city, &quot;Select a city&quot;) gg &lt;- tx2 %&gt;% ggplot2::ggplot() + ggplot2::aes(x = date, y = median, group = city) + ggplot2::geom_line() select &lt;- plotly::highlight( plotly::ggplotly(gg, tooltip = &quot;city&quot;), selectize = TRUE, persistent = TRUE ) ## We recommend setting `persistent` to `FALSE` (the default) because persistent selection mode can now be used by holding the shift key (while triggering the `on` event). crosstalk::bscols(filter, select) ## Setting the `off` event (i.e., &#39;plotly_doubleclick&#39;) to match the `on` event (i.e., &#39;plotly_click&#39;). You can change this default via the `highlight()` function. Select a city Here Carson adds lots more interactivity. tx &lt;- plotly::highlight_key(df) widgets &lt;- crosstalk::bscols( widths = c(12, 12, 12), crosstalk::filter_select(id = &quot;city&quot;, label = &quot;Cities&quot;, sharedData = tx, group = ~city), crosstalk::filter_slider(id = &quot;sales&quot;, label = &quot;Sales&quot;, sharedData = tx, column = ~sales), crosstalk::filter_checkbox(id = &quot;year&quot;, label = &quot;Years&quot;, sharedData = tx, group = ~year, inline = TRUE) ) ## Warning in crosstalk::bscols(widths = c(12, 12, 12), ## crosstalk::filter_select(id = &quot;city&quot;, : Sum of bscol width units is greater ## than 12 crosstalk::bscols( widths = c(4, 8), widgets, plotly::plot_ly(data = tx, x = ~date, y = ~median, showlegend = FALSE) %&gt;% plotly::add_lines(color = ~city, colors = &quot;black&quot;) ) Cities Sales Years 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 6.6 crosstalk Finally, here is a more basic use of crosstalk with plotly that you may find easier to re-use as a code template. df_crosstalk &lt;- crosstalk::SharedData$new(data = df, key = ~year) crosstalk::filter_select( id = &quot;year&quot;, label = &quot;Select a year&quot;, allLevels = TRUE, multiple = FALSE, sharedData = df_crosstalk, group = ~ factor(year) ) Select a year df_crosstalk %&gt;% plotly::plot_ly(x = ~date, y = ~sales, color = ~city, type = &#39;scatter&#39;, mode = &#39;lines&#39;) ## Warning in RColorBrewer::brewer.pal(N, &quot;Set2&quot;): n too large, allowed maximum for palette Set2 is 8 ## Returning the palette you asked for with that many colors ## Warning in RColorBrewer::brewer.pal(N, &quot;Set2&quot;): n too large, allowed maximum for palette Set2 is 8 ## Returning the palette you asked for with that many colors 6.7 apexchater simple The highcharter package creates interactive charts to the quality you often see on newspaper websites. It can produce great data visualisations like these poll tracking charts. However, it’s not free to use. ApexCharter is almost as good. It’s inspired by highcharter but is free to use. Look how easily we can create a chart with this simple code. df_red %&gt;% apexcharter::apex(type = &quot;line&quot;, mapping = aes(x = date, y = sales, group = city )) 6.8 apexchater with bells &amp; whistles To add the bells and whistles the apexcharter reference is well laid out with good examples. Here I’ve put in some useful ones in a clear code format. df_red %&gt;% apexcharter::apex(aes(x = date, y = sales, group = city), type = &quot;line&quot;) %&gt;% apexcharter::ax_legend(position = &quot;right&quot;) %&gt;% apexcharter::ax_stroke(width = 2) %&gt;% apexcharter::ax_yaxis( title = list(text = &quot;Sales&quot;) ) %&gt;% apexcharter::ax_xaxis(labels = list(format = &quot;yyyy&quot;)) %&gt;% apexcharter::ax_labs( title = &quot;apexcharter chart for sales by City&quot;, subtitle = &quot;this is a subtitle&quot; ) %&gt;% apexcharter::ax_title( style = list(fontSize = &quot;22px&quot;) ) %&gt;% apexcharter::ax_subtitle( style = list(fontSize = &quot;16px&quot;, color = &quot;#BDBDBD&quot;) ) %&gt;% apexcharter::ax_chart(zoom = list( enabled = TRUE, type = &quot;xy&quot; )) 6.9 dygraphs for time series data Dygraphs are excellent for data frames that are in a time series format. One quick way to convert a data frame to the time series dygraphs needs is the tsbox package. df_red_ts &lt;- df_red %&gt;% dplyr::select(date,city,sales) %&gt;% tsbox::ts_xts() ## [time]: &#39;date&#39; [value]: &#39;sales&#39; df_red_ts %&gt;% dygraphs::dygraph() 6.10 dygraphs bells &amp; whistles Here is a bells &amp; whistles version you can play around with as a template for your data. The help pages for dygraphs are well laid out. You really only need this one guide to find out how to change all the settings: https://rstudio.github.io/dygraphs/ dateWindow &lt;- c(&quot;2014-01-01&quot;, &quot;2015-07-01&quot;) presAnnotation &lt;- function(dygraph, x, text) { dygraph %&gt;% dyAnnotation(x, text, width = 60) } presBankHolidays &lt;- function(dygraph) { dygraph %&gt;% dyEvent(&quot;2014-07-03&quot;, &quot;Independence Day&quot;, labelLoc = &quot;bottom&quot;) %&gt;% dyEvent(&quot;2014-11-26&quot;, &quot;Thanksgiving&quot;, labelLoc = &quot;bottom&quot;) } df_red_ts %&gt;% dygraphs::dygraph(main = &quot;Housing Sales USA&quot;) %&gt;% # https://github.com/rstudio/dygraphs/issues/80 dyAxis( &quot;y&quot;, label = &quot;Sales&quot;, # http://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript valueFormatter = &#39;function(d){return d.toString().replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, &quot;,&quot;);}&#39;, axisLabelFormatter = &#39;function(d){return d.toString().replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, &quot;,&quot;);}&#39;, axisLabelFontSize = 10, axisLabelWidth = 70 ) %&gt;% dyRangeSelector( height = 60, dateWindow = dateWindow ) %&gt;% dyShading( from = &quot;2014-1-1&quot;, to = &quot;2014-12-31&quot; ) %&gt;% presBankHolidays() %&gt;% dyLegend(width = 600) %&gt;% presAnnotation(&quot;2014-07-01&quot;, text = &quot;2014&quot;) %&gt;% presAnnotation(&quot;2015-06-01&quot;, text = &quot;2015&quot;) %&gt;% dyOptions(colors = RColorBrewer::brewer.pal(8, &quot;Set2&quot;)) %&gt;% dyOptions(drawPoints = TRUE, pointSize = 2) %&gt;% dyLegend( show = &quot;always&quot;, hideOnMouseOut = FALSE ) "],
["animation.html", "Chapter 7 Animation 7.1 ggplot animation 7.2 plotly animation", " Chapter 7 Animation 7.1 ggplot animation Animation is quick to add to ggplot using the gganimate package. I’ve had a play here inspired by a good Tweet of examples.. I’ve found animation is most effective at showing changes over time. Here is the annual pattern of house sales changing each year. # Method from: https://github.com/thomasp85/gganimate/wiki/Temperature-time-series # https://stackoverflow.com/questions/54945861/problems-with-geom-text-and-pausing-the-animation # for each city and year find the sales value in the latest month availalbe # usually this is 12 but sometimes it&#39;s an earlier month label_anim &lt;- df %&gt;% dplyr::group_by(city,year) %&gt;% dplyr::summarise(max_month = max(month)) %&gt;% dplyr::ungroup() %&gt;% dplyr::inner_join(df_red, by = c(&quot;city&quot;=&quot;city&quot;, &quot;year&quot;=&quot;year&quot;, &quot;max_month&quot; = &quot;month&quot;)) %&gt;% dplyr::mutate(label_it = sales) %&gt;% dplyr::select(city,year,max_month,label_it) colors &lt;- c(&quot;Houston&quot; = &quot;#D9717D&quot;, &quot;Dallas&quot; = &quot;#4DB6D0&quot;, &quot;Austin&quot; = &quot;#BECA55&quot;) p &lt;- df %&gt;% dplyr::filter(city %in% c(&quot;Houston&quot;, &quot;Dallas&quot;, &quot;Austin&quot;)) %&gt;% dplyr::left_join(label_anim, by = c(&quot;city&quot; = &quot;city&quot;,&quot;year&quot; = &quot;year&quot;)) %&gt;% ggplot2::ggplot() + ggplot2::aes(x = month, y = sales, colour = city) + ggplot2::geom_line(size = 2) + ggplot2::theme_minimal() + ggplot2::coord_cartesian(clip = &#39;off&#39;) + # allow labels outside of plot ggplot2::theme(legend.position = &quot;none&quot;) + gganimate::transition_states(states = year, transition_length = 3, state_length = 1) + ggplot2::labs(title = &quot;Texas Housing Sales in : {closest_state}&quot;, caption = &quot;Source: ggplot2 package demo data&quot; ) + ggplot2::theme(plot.title = element_text(hjust = 1, vjust = -10, size = 30), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), strip.text.x = element_text(size = 15), axis.text.x = element_text(size = 15), axis.text.y = element_text(size = 15), plot.caption = element_text( hjust = 0, size = 12, color = &quot;darkgrey&quot; ) ) + ggplot2::scale_color_manual(values = colors) + ggplot2::scale_x_continuous(name = &quot;Month&quot;, limits = c(1,13), breaks = c(1,2,3,4,5,6,7,8,9,10,11,12), label = c(&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;Apr&quot;,&quot;May&quot;,&quot;Jun&quot;,&quot;Jul&quot;,&quot;Aug&quot;,&quot;Sep&quot;,&quot;Oct&quot;,&quot;Nov&quot;,&quot;Dec&quot;)) + ggplot2::geom_text(aes(x = max_month, y = label_it, label = city), hjust = 0, size = 8) gganimate::animate(p, width = 900, height = 600, end_pause = 10, fps = 20, rewind = FALSE, duration = 15) gganimate::anim_save(filename = &quot;housing.gif&quot;) 7.2 plotly animation Carson Sievert’s book shows us how to animate in plotly. The code is as simple as specifying which column to animate over as frames. The frames code line is commented on below. df_red %&gt;% plotly::plot_ly(alpha = 1) %&gt;% plotly::add_lines( x = ~month, y = ~sales, frame = ~year, # this line does the animation color = ~factor(city), line = list(simplify = FALSE) ) %&gt;% plotly::layout(yaxis = list(title = &quot;Sales&quot;)) ## Warning in RColorBrewer::brewer.pal(N, &quot;Set2&quot;): n too large, allowed maximum for palette Set2 is 8 ## Returning the palette you asked for with that many colors ## Warning in RColorBrewer::brewer.pal(N, &quot;Set2&quot;): n too large, allowed maximum for palette Set2 is 8 ## Returning the palette you asked for with that many colors Here we play around with the animation style. df_red %&gt;% plotly::plot_ly(alpha = 1) %&gt;% plotly::add_lines( x = ~month, y = ~sales, frame = ~year, color = ~factor(city), line = list(simplify = FALSE) ) %&gt;% plotly::layout(yaxis = list(title = &quot;Sales&quot;)) %&gt;% plotly::animation_opts(frame = 1000, # easing = &quot;elastic&quot;, easing = &quot;bounce&quot;, redraw = FALSE) %&gt;% plotly::animation_slider(currentvalue = list(prefix = &quot;YEAR &quot;, font = list(color=&quot;blue&quot;))) ## Warning in RColorBrewer::brewer.pal(N, &quot;Set2&quot;): n too large, allowed maximum for palette Set2 is 8 ## Returning the palette you asked for with that many colors ## Warning in RColorBrewer::brewer.pal(N, &quot;Set2&quot;): n too large, allowed maximum for palette Set2 is 8 ## Returning the palette you asked for with that many colors "],
["tables.html", "Chapter 8 Tables 8.1 DataTables (DT) basic 8.2 DataTables bells &amp; whistles 8.3 Colour DataTable with formattable 8.4 rpivottable simple 8.5 rpivottable (bells &amp; whistles)", " Chapter 8 Tables 8.1 DataTables (DT) basic For plotting we usually use tidy data where the data frame is “long”. But for easy to read tables we usually need to make our long tidy data “wide” (e.g. one column per month). To create a wide interactive table we use tidyr::pivot_wider() then pipe that wide data into DT::datatable() # first reshape with new tidyr df_wide &lt;- df %&gt;% dplyr::filter(year == 2014) %&gt;% dplyr::arrange(city,date) %&gt;% dplyr::mutate(date1 = base::format(date, &quot;%b %y&quot;)) %&gt;% tidyr::pivot_wider(id_cols = city, names_from = date1, values_from = sales) df_wide %&gt;% DT::datatable(df_wide) 8.2 DataTables bells &amp; whistles The DataTables reference is excellent for showing all the elements you can change with clear examples. Often you have decided on lots of different [DataTable options][https://rstudio.github.io/DT/options.html] that you want apply to many tables. Reduce the amount of by setting your main DT table options globally like this. options(DT.options = list( pageLength = 10, lengthMenu = c(5, 10, 20, 50, 100, 200, 500), dom = &quot;Blfrtip&quot;, buttons = list(list(extend = &quot;csv&quot;, filename = &quot;download&quot;)), keys = TRUE, autoWidth = TRUE )) Then the settings above will be applied to every later use of DT::datatable() df_wide %&gt;% DT::datatable( caption = &quot;Housing sales&quot;, filter = &quot;top&quot;, extensions = c(&quot;FixedColumns&quot;, &quot;Buttons&quot;), options = list(columnDefs = list(list(width = &quot;150px&quot;, targets = c(1)))) ) 8.3 Colour DataTable with formattable Colouring DataTable cells based on the value it contains is a common client request. Here is a code template you can re-use that is like Excel’s conditional formatting. # find 8 cut points going from the smallest to the largest value of sales in 2014 cuts &lt;- base::seq(from = min(df$sales[df$year==2014], na.rm = TRUE), to = max(df$sales[df$year==2014], na.rm=TRUE), length.out = 8) # define 9 colours for those cut points (1 more than the cut points needed) colours &lt;- RColorBrewer::brewer.pal(n = 9,name = &quot;Blues&quot;) # columns to format cols &lt;- base::seq(from = 2, to = ncol(df_wide), by = 1) df_wide %&gt;% dplyr::mutate_if(.predicate = base::is.character, .funs = base::as.factor) %&gt;% # converts an character columns to a factor so that the drop down menu works in the DataTable DT::datatable( caption = &quot;Housing sales&quot;, filter = &quot;top&quot;, extensions = c(&quot;FixedColumns&quot;, &quot;Buttons&quot;), options = list(columnDefs = list(list(width = &quot;150px&quot;, targets = c(1)))) ) %&gt;% DT::formatStyle(columns = cols, background = DT::styleInterval(cuts = cuts, values = colours)) %&gt;% DT::formatCurrency(columns = cols, currency = &quot;&quot;, digits = 0, interval = 3, mark = &#39;,&#39;) 8.4 rpivottable simple I love Excel pivot tables and charts for exploring data. rpivotables are a similar exploratory tool in R. We simply put the data frame into the function rpivotTable::rpviotTable() then play around with the html output below (as you would with an Excel pivot table). df_red %&gt;% rpivotTable::rpivotTable() 8.5 rpivottable (bells &amp; whistles) Once we’ve decided how we want the rpivotTable to look manually we can specify the layout that tells our story. df_red %&gt;% rpivotTable::rpivotTable( rows = c(&quot;year&quot;,&quot;city&quot;), cols = &quot;date&quot;, inclusions = list(year = list(&quot;2014&quot;)), aggregatorName = &quot;Sum&quot;, vals = &quot;sales&quot;, rendererName = &quot;Line Chart&quot;) "],
["colours.html", "Chapter 9 Colours 9.1 Color Brewer 9.2 Prismatic 9.3 Hand picked colours", " Chapter 9 Colours 9.1 Color Brewer We’ve already used colours in some of the previous code examples. Particularly the palettes in the RColorBrewer package. RColourBrewer contains ready made colour palettes we can view all at once like this. # easy colours RColorBrewer::display.brewer.all() That display can be limited to colour blind friendly palettes. display.brewer.all(colorblindFriendly = TRUE) We can set up a palette of colours with a set number of colours like this and view them in a simple bar plot. mypalette &lt;- RColorBrewer::brewer.pal(9,&quot;Set2&quot;) ## Warning in RColorBrewer::brewer.pal(9, &quot;Set2&quot;): n too large, allowed maximum for palette Set2 is 8 ## Returning the palette you asked for with that many colors graphics::barplot(1:9,col = mypalette) 9.2 Prismatic Prismatic lets us play around with palettes by shifting the entire range of colours at once. For example, starting with terrain. terrain &lt;- prismatic::colour(terrain.colors(10)) plot(terrain) Turn the palette grey. terrain_gray &lt;- prismatic::clr_grayscale(terrain) plot(terrain_gray) Darken the palette. terrain_darken &lt;- prismatic::clr_darken(terrain) plot(terrain_darken) Make the palette negative. terrain_negate &lt;- prismatic::clr_negate(terrain) plot(terrain_negate) 9.3 Hand picked colours You can also hand pick your own colour palette from this colour picking website recommended on an excellent blog post on using colours in ggplot by by Michael Toth. The colour picking website was used to create then copy and paste the colours below. newpalette &lt;- c(&quot;#804759&quot;,&quot;#713E4E&quot;,&quot;#633543&quot;,&quot;#562D39&quot;,&quot;#48252F&quot;,&quot;#3B1D25&quot;) barplot(1:6,col = newpalette) "],
["final-document.html", "Chapter 10 Final document 10.1 Picking a final output doc 10.2 flexdashboard 10.3 R markdown with floating contents and tabbed sections 10.4 bookdown", " Chapter 10 Final document 10.1 Picking a final output doc After all our hard work to explore and polish a final plot we should show off our work using an impactful and easy to navigate html document. Here are three good options. 10.2 flexdashboard This Flexdashboard by Matt Dray is a fantastic working example of how to use flexdashboard. It includes some of the interactivty we saw earlier using crosstalk, plotly and DT tables in the Interactive plots chapter. Also, here is a good presentation on how to build flexdashboards 10.3 R markdown with floating contents and tabbed sections When using R markdown I’ve found a floating table of contents and tabbed sections are the most effective for providing compact and easy to navigate html files. 10.4 bookdown Finally, how this book itself was created is very quick to do. Here is a board bookdown guide to follow. This is how I built this book: Clone or download this minimal example. Add this line…. output_dir: “docs” …to the configuration file _bookdown.yml (as described here) In RStudio build the book to gitbook format either using the drop down in the build tab (next to Environment tab) or by using this line of code.. rmarkdown::render_site(output_format = ‘bookdown::gitbook’, encoding = ‘UTF-8’) …this builds the book into a single doc folder holding all the html files needed in it. Push the docs folder to your repo so it’s ready to publish. Now on GitHub website follow this guidance. It describes how you go to the “Settings” of the repo, then “GitHub Pages” section, then the “Source” section that has a drop down. Select the third option of the Source drop down that is…. “master branch/docs folder Use only the docs folder for Github pages” ..it then has a bit of a think then tells you when the published book is ready to view and at what web address. "]
]
