[
["index.html", "Rapid R Data Viz Book Chapter 1 Why read this? 1.1 A rapid approach to data viz 1.2 What about Python? 1.3 What about other tools? 1.4 Find an R master to inspire you…", " Rapid R Data Viz Book Bill Cockerill 2019-10-27 Chapter 1 Why read this? 1.1 A rapid approach to data viz This is my current approach to data visualiation in R. My apporach keeps chaning. I’m amazed how often you can discover new methods and packages just in the excellent R-Bloggers website or #rstats on Twitter. No matter how expert you are using R I hope you learn about at least one new trick from this short guide. I always have in mind helping people just starting in R. Particularly anyone struggling to learn as I did. I love how the R community create many guides that de-mystify and democratise data analysis in R. With the same aim, all the code examples here are super simple and re-usable. As well as providing more complex examples set out clearly so they are easier to understand and re-use. Another reason forsuper simple examples is they can become fast Exploratory Data Exploration (EDA) methods too. The best data work starts with good EDA. That includes high quality data engineering or Kaggle Data Science competition winners. 1.2 What about Python? Python is great for data visualisation too such as Pands, Seaborn, Matplotlib, and Bokeh. But my day to day work is in R only so that’s where I’ve built most data vis skills so far. A good place to find similar examples with real data are Python Notebooks on the Kaggle Data Science website https://www.kaggle.com/kernels Use the filters at the top to select popular data visulisation notebooks in Python. 1.3 What about other tools? Graphical User Interface (GUI) or Point and Click (PaC) tools like Excel, PowerBI and Tableau still have their place as long as we don’t end up doing our data engineering with them. As Hadley wickham says… And even PowerPoint can be used to create publication quality charts. 1.4 Find an R master to inspire you… I hope you will find this material inspires you to try some new techniques that make your work faster and more interesting. How David Robinson explores, cleans then analystes data in R is inspiring. Lots of tricks I use here I saw him do on his Tidy Tuesday YouTube videos. I describe these at bullet 18 in my this collection of good R guides: https://github.com/billster45/r-guides-and-galleries#putting-it-all-together Another R master, Claus Wilke has created a new guide similar to this in that it starts with simple examples that become more complex . In his practical guide see how he starts with the bare minimum code you need to create the plot then gradually builds it up into a publication quality plot: https://github.com/wilkelab/practicalgg He wrote this so that help make the charts he creates in Fundamentals of Data Visualization easier to copy: https://serialmentor.com/dataviz/ This guide is similar to Wilke’s but with a greater focus on EDA. I also offer a wider set of tools for EDA, particulary R packages that make your plot interactive. As well as describing my personal preference for writing R code in a very clean and structured style. "],
["intro.html", "Chapter 2 Setup 2.1 Navigating an R markdown 2.2 Libraries 2.3 The data to visualise 2.4 Code style", " Chapter 2 Setup 2.1 Navigating an R markdown A quick way to move around an R Markdown document in RStudio is through the document outline. You can see the outline by holding down Ctrl+Shift+O, clicking the top right icon in the code pane, or left clicking on the bottom bar of the R markdown file. The gif below shows you how it works. * Recorded with ScreenToGif: https://www.screentogif.com/ 2.2 Libraries Here are all the R packages that are used in this guide. # data vis https://www.htmlwidgets.org/index.html library(ggplot2) # static charts - amazing variety library(plotly) # interactive charts ## ## Attaching package: &#39;plotly&#39; ## The following object is masked from &#39;package:ggplot2&#39;: ## ## last_plot ## The following object is masked from &#39;package:stats&#39;: ## ## filter ## The following object is masked from &#39;package:graphics&#39;: ## ## layout library(apexcharter) # much like the paid for highchater js library. Powerful library(rayshader) # 3D charts library(trelliscopejs) # small multiples ## Registered S3 method overwritten by &#39;trelliscopejs&#39;: ## method from ## +.gg ggplot2 library(dygraphs) # awesome interactive timeseries # ggplot extensions https://www.ggplot2-exts.org/gallery/ library(scales) # improve your scales library(gganimate) # animate your ggplot library(png) # dunno library(directlabels) # for directly labelling lines for example library(gghighlight) # label points of interest on your charts library(ggrepel) # move labels so they don&#39;t overlap # colours library(RColorBrewer) # ready to use colour pallets # tables library(kableExtra) # attractive static tables library(formattable) # colour tables. Like Excel&#39;s conditional formattinng ## ## Attaching package: &#39;formattable&#39; ## The following objects are masked from &#39;package:scales&#39;: ## ## comma, percent, scientific ## The following object is masked from &#39;package:plotly&#39;: ## ## style library(rpivotTable) # like Excel&#39;s pivot table library(DT) # awesome interactive tables # Quality Assurance library(tidylog) # great for QA on the fly ## ## Attaching package: &#39;tidylog&#39; ## The following objects are masked from &#39;package:plotly&#39;: ## ## distinct, filter, group_by, mutate, select, summarise, ## transmute ## The following object is masked from &#39;package:stats&#39;: ## ## filter # wrangling / munging / manipulating library(tidyverse) # loads of useful packages in one ## -- Attaching packages ----------------------------------- tidyverse 1.2.1 -- ## v tibble 2.1.3 v purrr 0.3.2 ## v tidyr 1.0.0 v dplyr 0.8.3 ## v readr 1.3.1 v stringr 1.4.0 ## v tibble 2.1.3 v forcats 0.4.0 ## -- Conflicts -------------------------------------- tidyverse_conflicts() -- ## x dplyr::add_count() masks tidylog::add_count() ## x dplyr::add_tally() masks tidylog::add_tally() ## x dplyr::anti_join() masks tidylog::anti_join() ## x readr::col_factor() masks scales::col_factor() ## x dplyr::count() masks tidylog::count() ## x purrr::discard() masks scales::discard() ## x dplyr::distinct() masks tidylog::distinct(), plotly::distinct() ## x dplyr::distinct_all() masks tidylog::distinct_all() ## x dplyr::distinct_at() masks tidylog::distinct_at() ## x dplyr::distinct_if() masks tidylog::distinct_if() ## x tidyr::drop_na() masks tidylog::drop_na() ## x tidyr::fill() masks tidylog::fill() ## x dplyr::filter() masks tidylog::filter(), plotly::filter(), stats::filter() ## x dplyr::filter_all() masks tidylog::filter_all() ## x dplyr::filter_at() masks tidylog::filter_at() ## x dplyr::filter_if() masks tidylog::filter_if() ## x dplyr::full_join() masks tidylog::full_join() ## x tidyr::gather() masks tidylog::gather() ## x dplyr::group_by() masks tidylog::group_by(), plotly::group_by() ## x dplyr::group_by_all() masks tidylog::group_by_all() ## x dplyr::group_by_at() masks tidylog::group_by_at() ## x dplyr::group_by_if() masks tidylog::group_by_if() ## x dplyr::group_rows() masks kableExtra::group_rows() ## x dplyr::inner_join() masks tidylog::inner_join() ## x dplyr::lag() masks stats::lag() ## x dplyr::left_join() masks tidylog::left_join() ## x dplyr::mutate() masks tidylog::mutate(), plotly::mutate() ## x dplyr::mutate_all() masks tidylog::mutate_all() ## x dplyr::mutate_at() masks tidylog::mutate_at() ## x dplyr::mutate_if() masks tidylog::mutate_if() ## x tidyr::replace_na() masks tidylog::replace_na() ## x dplyr::right_join() masks tidylog::right_join() ## x dplyr::select() masks tidylog::select(), plotly::select() ## x dplyr::select_all() masks tidylog::select_all() ## x dplyr::select_at() masks tidylog::select_at() ## x dplyr::select_if() masks tidylog::select_if() ## x dplyr::semi_join() masks tidylog::semi_join() ## x tidyr::spread() masks tidylog::spread() ## x dplyr::summarise() masks tidylog::summarise(), plotly::summarise() ## x dplyr::summarise_all() masks tidylog::summarise_all() ## x dplyr::summarise_at() masks tidylog::summarise_at() ## x dplyr::summarise_if() masks tidylog::summarise_if() ## x dplyr::summarize() masks tidylog::summarize() ## x dplyr::summarize_all() masks tidylog::summarize_all() ## x dplyr::summarize_at() masks tidylog::summarize_at() ## x dplyr::summarize_if() masks tidylog::summarize_if() ## x dplyr::tally() masks tidylog::tally() ## x dplyr::top_n() masks tidylog::top_n() ## x dplyr::transmute() masks tidylog::transmute(), plotly::transmute() ## x dplyr::transmute_all() masks tidylog::transmute_all() ## x dplyr::transmute_at() masks tidylog::transmute_at() ## x dplyr::transmute_if() masks tidylog::transmute_if() library(glue) # not sure ## ## Attaching package: &#39;glue&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## collapse # time series tools library(anytime) # convert text into the right date type library(xts) # convert to time series for dygraphs ## Loading required package: zoo ## ## Attaching package: &#39;zoo&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## as.Date, as.Date.numeric ## Registered S3 method overwritten by &#39;xts&#39;: ## method from ## as.zoo.xts zoo ## ## Attaching package: &#39;xts&#39; ## The following objects are masked from &#39;package:dplyr&#39;: ## ## first, last library(tsbox) # easily convert to time series # sample data library(mosaicData) # sample data library(xfun) ## ## Attaching package: &#39;xfun&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## attr, isFALSE # https://github.com/vincentarelbundock/Rdatasets/blob/master/Rdatasets.R # https://vincentarelbundock.github.io/Rdatasets/ 2.3 The data to visualise A lot of data visilisation is showing how values change over time. Therefore, rather than the ususal iris or mtcars, this guide uses a built-in data set within ggplot of housing sales in American cities over several years. The only manipulation we will do is to create a real date using the excellet R lubrdate package. We also reduce the number of American cities so our first charts aren’t too crowded. In this simple data preperation or wrangling I’ll use tidylog with dplyr. It’s a simple way to do fast basic Quality Asssurance as you code. Simple replace dplyr verbs with the same verb in tidylog. This will tell you key info about what is being done to your data by each dplyr verb. For example, how many rows are dropped or added byfilters or joins, and what percentage of values changed after a mutate. # create a data frame with a real date for plotting df &lt;- ggplot2::txhousing %&gt;% tidylog::mutate(date = lubridate::make_date(year = year, month = month, day =1)) ## mutate: changed 8,602 values (100%) of &#39;date&#39; (0 new NA) # reduce the number of cities for simpler plots df_red &lt;- df %&gt;% dplyr::group_by(city) %&gt;% tidylog::mutate(sales_max = base::max(sales)) %&gt;% dplyr::ungroup() %&gt;% tidylog::filter(sales_max &gt;= 800) ## mutate (grouped): new variable &#39;sales_max&#39; with 27 unique values and 43% NA ## filter: removed 6,545 rows (76%), 2,057 rows remaining Look at these useful messages above crated by tiylog. So it tells us what percentage of values are NA. And how many rows the filter has removed. Has this worked? No! The mutate has gone wrong as we would like 100% of rows to have the maximum sales value! Well spotted tidylog. We correct it below by removing the NAs from the maximum # reduce the number of cities for simpler plots df_red &lt;- df %&gt;% dplyr::group_by(city) %&gt;% tidylog::mutate(sales_max = base::max(sales, na.rm = TRUE)) %&gt;% dplyr::ungroup() %&gt;% tidylog::filter(sales_max &gt;= 800) ## mutate (grouped): new variable &#39;sales_max&#39; with 45 unique values and 0% NA ## filter: removed 6,545 rows (76%), 2,057 rows remaining Let’s take a quick look at the top few rows of the data using kableExtra table. kableExtra::kable(utils::head(df)) city year month sales volume median listings inventory date Abilene 2000 1 72 5380000 71400 701 6.3 2000-01-01 Abilene 2000 2 98 6505000 58700 746 6.6 2000-02-01 Abilene 2000 3 130 9285000 58100 784 6.8 2000-03-01 Abilene 2000 4 98 9730000 68600 785 6.9 2000-04-01 Abilene 2000 5 141 10590000 67300 794 6.8 2000-05-01 Abilene 2000 6 156 13910000 66900 780 6.6 2000-06-01 2.4 Code style 2.4.1 Include the package name every time. Why? When I first started learning R I tried to teach myself with other people’s code. I got confused where functions came from, particularly when they used their own functions. It made their code appear harder, more complex and cleverer than it really was. Instead I use the package name before every function. Even base R functions. This can help people new to R who read your code. And it can help you when yourself when you come back to code you did ages ago and have forgotten what you were doing. Another good reason to use the package name is you can hit the tab key at the end of the double colon like this and see all the functions in that package. Also, try highlighting a function, including the package name and hit the F1 key. (You’ll see David Robinson do this a lot even on his own packages.) Also try hitting the F2 key to quickly see all the possible parameters in a function and see what the defaults are that it will use if you don’t set them to a new value. ggplot2:: dplyr::arrange() ggrepel::geom_text_repel() 2.4.2 One line does one thing (Hit the return key a lot!) Try and get each line to do one thing by hitting the return key after every pipe, comma or plus symbol in ggplot. Also, provide values for your paramenters in the order the function expects them so you don’t have to name them. I think it’s better to name each one so your code is easier to read. Here is code that works but doesn’t follow any of those rules. The code is cramped and slow to understand, edit or re-use. ggplot(df) + geom_line(aes(date, sales, colour = city)) + ggplot2::theme_minimal() + gghighlight(max(sales) &gt; 5000, label_params = list(size = 4)) + scale_y_continuous(labels = scales::comma) + scale_x_date(date_breaks = &quot;1 year&quot;, labels = scales::date_format(&quot;%d %b %y&quot;), limits = c(as.Date(&quot;2000-01-01&quot;), as.Date(&quot;2015-07-01&quot;))) + labs(title = &quot;US Housing Sales over time&quot;, subtitle = &quot;US cities with more than 5k sales in a month&quot;, caption = &quot;Source: ggplot2 package demo data&quot;) + geom_vline(xintercept = years, linetype = 4) + theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), strip.text.x = element_text(size = 10), axis.text.x = element_text(angle = 60, hjust = 1, size = 9), legend.text = element_text(size = 12), legend.position = &quot;right&quot;, legend.direction = &quot;vertical&quot;, plot.title = element_text(size = 22, face = &quot;bold&quot;), plot.subtitle = element_text(color = &quot;grey&quot;, size = 18), plot.caption = element_text(hjust = 0, size = 12, color = &quot;darkgrey&quot;), legend.title = element_blank()) The code below is the same code as above but it follows all these rules: Use package names Each line does one thing or is one paramater settging in a function Tabbed consistently by hitting the return key after each pipe, comma or plus Put spaces around equals Name every parameter you put in a function By following these rules it means: The code is easier to run top downwards adding one chunk at a time (like the popular ggplot flipbooks I describe at bullet 11 here: https://github.com/billster45/r-guides-and-galleries/blob/master/README.md#learn-to-visualise-data-with-r) Easily comment whole lines or parameters to undersatnd what they add. More easily find and edit parameaters (e.g. a font size) Helps others QA or re-use your code more quickly. Helps others new to R understand what you are doing. df %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = sales, colour = city ) + ggplot2::geom_line() + ggplot2::theme_minimal() + gghighlight::gghighlight(max(sales) &gt; 5000, label_params = list(size = 4) ) + ggplot2::scale_y_continuous(labels = scales::comma) + ggplot2::scale_x_date( date_breaks = &quot;1 year&quot;, labels = scales::date_format(&quot;%d %b %y&quot;), limits = c( as.Date(&quot;2000-01-01&quot;), as.Date(&quot;2015-07-01&quot;) ) ) + ggplot2::labs( title = &quot;US Housing Sales over time&quot;, subtitle = &quot;US cities with more than 5k sales in a month&quot;, caption = &quot;Source: ggplot2 package demo data&quot; ) + ggplot2::geom_vline( xintercept = years, linetype = 4 ) + ggplot2::theme( panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), strip.text.x = element_text(size = 10), axis.text.x = element_text( angle = 60, hjust = 1, size = 9 ), legend.text = element_text(size = 12), legend.position = &quot;right&quot;, legend.direction = &quot;vertical&quot;, plot.title = element_text( size = 22, face = &quot;bold&quot; ), plot.subtitle = element_text( color = &quot;grey&quot;, size = 18 ), plot.caption = element_text( hjust = 0, size = 12, color = &quot;darkgrey&quot; ), legend.title = element_blank() ) "],
["exploratory-data-analysis.html", "Chapter 3 Exploratory Data Analysis 3.1 Start with dplyr counts and summaries in console 3.2 Next plot data points 3.3 Why start with geom_point()? 3.4 Now facet by categories 3.5 Facet with trelliscopejs 3.6 Or loop and plot every value 3.7 Polish your final plot", " Chapter 3 Exploratory Data Analysis 3.1 Start with dplyr counts and summaries in console David Robinson first explores new data with simple counts in the console. Here we don’t use the package name (so breaking the rule I just told you) so we can quickly explore the data by typing dplyr verbs quickly df %&gt;% count(city) %&gt;% View() df %&gt;% count(city, year, month) %&gt;% View()# df %&gt;% group_by(city) %&gt;% summarise(vol_max = max(volume, na.rm = T)) %&gt;% arrange(desc(vol_max)) %&gt;% View() 3.2 Next plot data points After using count(), group_by() and summarise() plot all data points with ggplot2::geom_point(). It almost NEVER fails to show you what’s going on and is unlikely to return errors. This is the minimum and most reliable ggplot code to start with. Let’s look at all the values of sales for each date. df %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = sales ) + ggplot2::geom_point() ## Warning: Removed 568 rows containing missing values (geom_point). Then look at sales over the values of any other dimensions. There is one other dimension city. df %&gt;% ggplot2::ggplot() + ggplot2::aes( x = sales, y = city ) + ggplot2::geom_point() ## Warning: Removed 568 rows containing missing values (geom_point). But those points look a bit crowded. Whenever the dots overlap replace geom_point() with geom_jitter(). And we make the dots lighter using a non-intuitive parameter called alpha. df %&gt;% ggplot2::ggplot() + ggplot2::aes( x = sales, y = city ) + ggplot2::geom_jitter(alpha = 0.1) ## Warning: Removed 568 rows containing missing values (geom_point). Of course we know sales of most things vary by season. Let’s put date on the x axis, make city the colour, and because the data is over time we can join those dots using ggplot2::geom_line() We’re also using the reduced data set so it’s not too crowded for now. df_red %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = sales, colour = city ) + ggplot2::geom_line() Beautiful, while sales have very different volumes between cities we can see they tightly follow the same seasonal pattern. But the are on different scales so harder to compare the patterns. One option Wickham does is to log transform the sales value. df_red %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = base::log(sales), colour = city ) + ggplot2::geom_line() 3.3 Why start with geom_point()? We start with ggplot2::geom_point() because it works for for both raw and summrarised data straight away. For example, here is raw granular data where each row describes a person getting married. marriage &lt;- mosaicData::Marriage %&gt;% tidylog::mutate(prev_marriage = as.character(prevconc)) %&gt;% tidylog::mutate(prev_marriage = case_when( is.na(prev_marriage) ~ &quot;First Time&quot;, TRUE ~ prev_marriage )) %&gt;% tidylog::mutate(ceremonydate1 = lubridate::parse_date_time(ceremonydate, &quot;mdy&quot;)) ## mutate: new variable &#39;prev_marriage&#39; with 3 unique values and 49% NA ## mutate: changed 48 values (49%) of &#39;prev_marriage&#39; (48 fewer NA) ## mutate: new variable &#39;ceremonydate1&#39; with 49 unique values and 0% NA kableExtra::kable(utils::head(marriage %&gt;% dplyr::select(ceremonydate1, person, prev_marriage, age, race, sign))) ceremonydate1 person prev_marriage age race sign 1996-11-09 Groom First Time 32.60274 White Aries 1996-11-12 Groom Divorce 32.29041 White Leo 1996-11-27 Groom Divorce 34.79178 Hispanic Pisces 1996-12-07 Groom Divorce 40.57808 Black Gemini 1996-12-14 Groom First Time 30.02192 White Saggitarius 1996-12-26 Groom First Time 26.86301 White Pisces Before we had one value per city and date so geom_line worked fine as long as the date and the city were in the “aesthetics” of the plot (e.g. x,y, colour, category, or facet being the most common). A common error with raw data I keep making is to try and put it into a bar or line chart straight away then get confused by the error or the chart. marriage %&gt;% ggplot2::ggplot() + ggplot2::aes( x = prev_marriage, y = age ) + ggplot2::geom_bar() ## Error: stat_count() must not be used with a y aesthetic. ggplot2::geom_col() would be a better choice but we still have to think to much about what it’s showing. Yes a bar plot might be the right choice for our final plot but it’s sometimes troublesome when we want to explore quickly. marriage %&gt;% ggplot2::ggplot() + ggplot2::aes( x = prev_marriage, y = age ) + ggplot2::geom_col() Here we use ggplot2::geom_point() and facet by person marriage %&gt;% ggplot2::ggplot() + ggplot2::aes( x = prev_marriage, y = age ) + ggplot2::facet_wrap(~person) + ggplot2::geom_point(alpha = 0.3) Immediately this is interesting as we see the ages of brides and grooms and what happened in their previous marriage! Death, Divorce or Unknown! Based on the distribution of those points that are so pleasingly intuitive we can go on to experiment with different classic ways to represent the distributions we see. So first histograms marriage %&gt;% ggplot2::ggplot() + ggplot2::aes(x = age) + ggplot2::facet_wrap(~ person + prev_marriage) + ggplot2::geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Or the density distribution with ggplot2::geom_density() p &lt;- marriage %&gt;% ggplot2::ggplot() + ggplot2::aes( x = age, fill = prev_marriage ) + ggplot2::geom_density(adjust = 1, alpha = 0.5, colour = NA) + ggplot2::facet_wrap(vars(person), ncol = 1) + ggplot2::theme_minimal() directlabels::direct.label(p, list(&quot;top.points&quot;, cex = .75, hjust = 0, vjust = -0.2)) However, with so few data points I personally prefer the geom_point chart. 3.4 Now facet by categories Another logical step after showing categories by colour is to use “small multiples”. This is a fancy way of saying draw a chart for each category and look at them all at once in a grid. An important setting here is to specify scales = “free” so they are their own scale and we can study what’s going on in each city. This lets us more easily spot interesting differences in the seasonal pattern between cities. df_red %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = sales, colour = city ) + ggplot2::geom_line() + ggplot2::facet_wrap(~city, scales = &quot;free&quot; ) 3.5 Facet with trelliscopejs Another powerful way to facet or create small multiples for your data exploration is trelliscope. Here we look at al the US cities adding a facet by city. And it lets you play around with the data further. Have a go on this below and see what it does. df %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = sales ) + ggplot2::geom_line() + trelliscopejs::facet_trelliscope(~city, scales = &quot;free&quot;, nrow = 3, ncol = 5, self_contained = TRUE, # as_plotly = TRUE, # not working plotly_cfg = list(displayModeBar = FALSE) ) 3.6 Or loop and plot every value Or to really study each chart, nest the data into a data frame of dataframes for each city. Then loop through each one and creating a plot in the data frame we plot. df_red_nest &lt;- df_red %&gt;% dplyr::group_by(city) %&gt;% tidyr::nest() df_red_nest %&gt;% View() df_red_nest[[2]][[1]] %&gt;% View() df_red_nest_plot &lt;- df_red_nest %&gt;% dplyr::mutate(plot = purrr::map2( .x = data, .y = city, ~ ggplot2::ggplot( data = .x, aes( x = date, y = sales ) ) + ggtitle(glue(&quot;Plot of {.y}&quot;)) + geom_line() )) df_red_nest_plot %&gt;% View() print(df_red_nest_plot$plot) ## [[1]] ## ## [[2]] ## ## [[3]] ## ## [[4]] ## ## [[5]] ## ## [[6]] ## ## [[7]] ## ## [[8]] ## ## [[9]] ## ## [[10]] ## ## [[11]] 3.7 Polish your final plot We now have a bare minimum Exploratory Data Analysis toolkit of how to explore the data from the console using View(), and then looking at the data points, followed by some line plots. We could soon be ready to decide on the plot we want that tells and interesting story. But adding in all the bells and whistles to make it ready for a customer or a publication can take ages. It shouldn’t be part of your exploratory data analysis. Also, we should use a code style recommended before that lays out your code cleanly. It’s far quicker then to comment out or tweak the values of each part of your plot until it looks just right. I won’t explain each line below other than to say you can run it in chunks to understand it like the popular ggplot flip-books. # a list of dates to add vertical lines to the plot years &lt;- base::seq.Date( from = as.Date(&quot;2000-01-01&quot;), to = as.Date(&quot;2015-01-01&quot;), by = &quot;years&quot; ) df %&gt;% ggplot2::ggplot() + ggplot2::aes( x = date, y = sales, colour = city ) + ggplot2::geom_line(size = 1) + ggplot2::theme_minimal() + gghighlight::gghighlight(base::max(sales) &gt; 5000, # highlight only cities with higher sales label_params = list(size = 4) ) + ggplot2::scale_y_continuous(labels = scales::comma) + ggplot2::scale_x_date( date_breaks = &quot;1 year&quot;, labels = scales::date_format(&quot;%b %Y&quot;), limits = c( as.Date(&quot;2000-01-01&quot;), as.Date(&quot;2015-07-01&quot;) ) ) + ggplot2::labs( title = &quot;US Housing Sales&quot;, subtitle = &quot;US cities with more than 5,000 sales in any month&quot;, caption = &quot;Source: ggplot2 built in txhousing data set&quot;, x = &quot;Month&quot;, y = &quot;Volume of Sales&quot; ) + ggplot2::geom_vline( xintercept = years, linetype = 4 ) + ggplot2::theme( panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), strip.text.x = element_text(size = 10), axis.text.x = element_text( angle = 60, hjust = 1, size = 9 ), legend.text = element_text(size = 12), legend.position = &quot;right&quot;, legend.direction = &quot;vertical&quot;, plot.title = element_text( size = 22, face = &quot;bold&quot; ), plot.subtitle = element_text( color = &quot;grey&quot;, size = 18 ), plot.caption = element_text( hjust = 0, size = 12, color = &quot;darkgrey&quot; ), legend.title = element_blank() ) ## label_key: city ## Warning: Removed 430 rows containing missing values (geom_path). So this isn’t necessarily a good plot. There’s things wrong with it I expect you’ll want to change. But with this clear ladder of code you can more quickly read, edit, comment chunks out, or run in chunks from the top down. "],
["interactive-plots.html", "Chapter 4 Interactive plots 4.1 Plotly 4.2 Plotly Build to edit 4.3 Plotly (most basic) 4.4 plotly (a few more settings) 4.5 plotly (bells &amp; whistles) 4.6 apexchater simple 4.7 apexchater with bells &amp; whistles 4.8 dygraphs for time series data 4.9 dygraphs bells &amp; whistles", " Chapter 4 Interactive plots 4.1 Plotly Interactive plots can help you and your audience explore and understand stories in the data faster and more enjoyably. Carson Sievert who maintains the Plotly R package demonstrates here how if interactive plots are built quickly (as is possible with Plotly) they can augment your data exploration: https://talks.cpsievert.me/20180202/#1 He does some nice things with the same US housing data. A quick way to use it is use ggplot first then put that through a plotly function called plotly::ggplotly() like this… p &lt;- df_red %&gt;% ggplot2::ggplot() + ggplot2::aes(x = date, y = sales, colour = city) + ggplot2::geom_line() plotly::ggplotly(p) 4.2 Plotly Build to edit Often, even with changing the ggplot, the ggplotly function doesn’t quite do what you wnat. Use plotly build instaed to create a plot you can edit all aspects of by navifatint hte list p &lt;- df_red %&gt;% ggplot2::ggplot() + ggplot2::aes(x = date, y = sales, colour = city) + ggplot2::geom_line() p_build &lt;- plotly::plotly_build(p) # add in aplotly build 4.3 Plotly (most basic) Plotly is very forgiving. Here we don’t tell it what kind of plot we want (such as points or lines) but it still creates somethign. And thanfully it’s our friend the points.. df_red %&gt;% plotly::plot_ly(x = ~date, y = ~sales, color = ~city) 4.4 plotly (a few more settings) with a few more settings we can make it a line plot df_red %&gt;% plotly::plot_ly(x = ~date, y = ~sales, color = ~city, type = &quot;scatter&quot;, linetype = &quot;markers&quot;) 4.5 plotly (bells &amp; whistles) And as before add some bells and whistles to get close to our final plot. ax &lt;- list( title = &quot;&quot;, zeroline = FALSE, showline = FALSE, showticklabels = FALSE, showgrid = FALSE ) df_red %&gt;% plotly::plot_ly(x = ~date, y = ~sales, text = rownames(df_red)) %&gt;% add_lines(linetype = ~city, colorscale = &quot;set3&quot;) %&gt;% rangeslider() %&gt;% plotly::layout(xaxis = ax, yaxis = ax) Here are some good further plotly resources https://plotly-r.com/index.html https://plotly-r.com/scatter-traces.html#lines https://moderndata.plot.ly/tufte-style-visualizations-in-r-using-plotly/ 4.6 apexchater simple The highcharter js package is great but not free: https://github.com/jbkunst/highcharter ApexCharter is almost as good, inspried by highcharter and is free to use… Look how easily we can create a chart with it.. df_red %&gt;% apexcharter::apex(type = &quot;line&quot;, mapping = aes(x = date, y = sales, group = city )) 4.7 apexchater with bells &amp; whistles Addding the bells and whistles can certainly be a bit fiddlier than with ggplot and plotly, but here is a lot you could use. the best place for advice is the referene…https://dreamrs.github.io/apexcharter/reference/index.html df_red %&gt;% apexcharter::apex(aes(x = date, y = sales, group = city), type = &quot;line&quot;) %&gt;% apexcharter::ax_legend(position = &quot;right&quot;) %&gt;% apexcharter::ax_stroke(width = 2) %&gt;% #apexcharter::ax_colors(mypalette) %&gt;% apexcharter::ax_yaxis( title = list(text = &quot;Sales&quot;) ) %&gt;% apexcharter::ax_xaxis(labels = list(format = &quot;yyyy&quot;)) %&gt;% apexcharter::ax_labs( title = &quot;apexcharter chart for sales by City&quot;, subtitle = &quot;this is a subtitle&quot; ) %&gt;% apexcharter::ax_title( style = list(fontSize = &quot;22px&quot;) ) %&gt;% apexcharter::ax_subtitle( style = list(fontSize = &quot;16px&quot;, color = &quot;#BDBDBD&quot;) ) %&gt;% apexcharter::ax_chart(zoom = list( enabled = TRUE, type = &quot;xy&quot; )) 4.8 dygraphs for time series data Similar in style to apexchater is the excellent dygraphs for when your data is a time series… One hurdle is your data frame needs to be a time series. A really easy way to convert is the tsbox pacakge http://rstudio.github.io/dygraphs/ https://www.tsbox.help/articles/tsbox.html df_red_ts &lt;- df_red %&gt;% dplyr::select(date,city,sales) %&gt;% tsbox::ts_xts() ## [time]: &#39;date&#39; [value]: &#39;sales&#39; df_red_ts %&gt;% dygraphs::dygraph() 4.9 dygraphs bells &amp; whistles Again, here is a bells &amp; whilstles version you can play around with to get it how you like. The help pages for dygraphs are very well laid out. Pretty much you only need this one guide to find out how to change all the settings possible: https://rstudio.github.io/dygraphs/ dateWindow &lt;- c(&quot;2014-01-01&quot;, &quot;2015-07-01&quot;) presAnnotation &lt;- function(dygraph, x, text) { dygraph %&gt;% dyAnnotation(x, text, width = 60) } presBankHolidays &lt;- function(dygraph) { dygraph %&gt;% dyEvent(&quot;2014-07-03&quot;, &quot;Independence Day&quot;, labelLoc = &quot;bottom&quot;) %&gt;% dyEvent(&quot;2014-11-26&quot;, &quot;Thanksgiving&quot;, labelLoc = &quot;bottom&quot;) } df_red_ts %&gt;% dygraphs::dygraph(main = &quot;Housing Sales USA&quot;) %&gt;% # https://github.com/rstudio/dygraphs/issues/80 dyAxis( &quot;y&quot;, label = &quot;Sales&quot;, # http://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript valueFormatter = &#39;function(d){return d.toString().replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, &quot;,&quot;);}&#39;, axisLabelFormatter = &#39;function(d){return d.toString().replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, &quot;,&quot;);}&#39;, axisLabelFontSize = 10, axisLabelWidth = 70 ) %&gt;% dyRangeSelector( height = 60, dateWindow = dateWindow ) %&gt;% dyShading( from = &quot;2014-1-1&quot;, to = &quot;2014-12-31&quot; ) %&gt;% presBankHolidays() %&gt;% dyLegend(width = 600) %&gt;% presAnnotation(&quot;2014-07-01&quot;, text = &quot;2014&quot;) %&gt;% presAnnotation(&quot;2015-06-01&quot;, text = &quot;2015&quot;) %&gt;% dyOptions(colors = RColorBrewer::brewer.pal(8, &quot;Set2&quot;)) %&gt;% dyOptions(drawPoints = TRUE, pointSize = 2) %&gt;% dyLegend( show = &quot;always&quot;, hideOnMouseOut = FALSE ) "],
["animation.html", "Chapter 5 Animation", " Chapter 5 Animation Animation is easy to add. I’ve had a play here inspired by a good Tweet of examples you could follow: https://github.com/billster45/gganimate-experiments/blob/master/README.md I’ve found animation is most effective when you see changes over time. Here is the annual pattern of sales changing each year. Getting the labels to display at the end of each line as it animates is fiddly. # Method from: https://github.com/thomasp85/gganimate/wiki/Temperature-time-series # https://stackoverflow.com/questions/54945861/problems-with-geom-text-and-pausing-the-animation # for each city and year find the sales value in the latest month availalbe # usually this is 12 but sometimes it&#39;s an earlier month label_anim &lt;- df %&gt;% dplyr::group_by(city,year) %&gt;% dplyr::summarise(max_month = max(month)) %&gt;% dplyr::ungroup() %&gt;% dplyr::inner_join(df_red, by = c(&quot;city&quot;=&quot;city&quot;, &quot;year&quot;=&quot;year&quot;, &quot;max_month&quot; = &quot;month&quot;)) %&gt;% dplyr::mutate(label_it = sales) %&gt;% dplyr::select(city,year,max_month,label_it) colors &lt;- c(&quot;Houston&quot; = &quot;#D9717D&quot;, &quot;Dallas&quot; = &quot;#4DB6D0&quot;, &quot;Austin&quot; = &quot;#BECA55&quot;) p &lt;- df %&gt;% dplyr::filter(city %in% c(&quot;Houston&quot;, &quot;Dallas&quot;, &quot;Austin&quot;)) %&gt;% dplyr::left_join(label_anim, by = c(&quot;city&quot; = &quot;city&quot;,&quot;year&quot; = &quot;year&quot;)) %&gt;% ggplot2::ggplot() + ggplot2::aes(x = month, y = sales, colour = city) + ggplot2::geom_line(size = 2) + ggplot2::theme_minimal() + ggplot2::coord_cartesian(clip = &#39;off&#39;) + # allow labels outside of plot ggplot2::theme(legend.position = &quot;none&quot;) + gganimate::transition_states(states = year, transition_length = 3, state_length = 1) + ggplot2::labs(title = &quot;US Housing Sales in : {closest_state}&quot;, caption = &quot;Source: ggplot2 package demo data&quot; ) + ggplot2::theme(plot.title = element_text(hjust = 1, vjust = -10, size = 30), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), strip.text.x = element_text(size = 15), axis.text.x = element_text(size = 15), axis.text.y = element_text(size = 15), plot.caption = element_text( hjust = 0, size = 12, color = &quot;darkgrey&quot; ) ) + ggplot2::scale_color_manual(values = colors) + ggplot2::scale_x_continuous(name = &quot;Month&quot;, limits = c(1,13), breaks = c(1,2,3,4,5,6,7,8,9,10,11,12), label = c(&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;Apr&quot;,&quot;May&quot;,&quot;Jun&quot;,&quot;Jul&quot;,&quot;Aug&quot;,&quot;Sep&quot;,&quot;Oct&quot;,&quot;Nov&quot;,&quot;Dec&quot;)) + ggplot2::geom_text(aes(x = max_month, y = label_it, label = city), hjust = 0, size = 8) gganimate::animate(p, width = 900, height = 600, end_pause = 10, fps = 20, rewind = FALSE, duration = 15) gganimate::anim_save(filename = &quot;housing.gif&quot;) "],
["svg-polish.html", "Chapter 6 SVG Polish", " Chapter 6 SVG Polish Having said all this, many times I’ve got stuck in stackoverflow hell going round in circles trying to get it to display a &lt;- df_red %&gt;% ggplot2::ggplot() + ggplot2::aes(x = date, y = sales, colour = city) + ggplot2::geom_line() + ggplot2::scale_y_continuous(labels = scales::comma) + ggplot2::theme_minimal() ggplot2::ggsave(file=&quot;test.svg&quot;, device = &quot;svg&quot;, plot=a, width=10, height=8) ## Warning: package &#39;gdtools&#39; was built under R version 3.6.1 now that we have saved it lets insert it into PowerPoint and ungroup… "],
["tables.html", "Chapter 7 Tables 7.1 DT 7.2 rpivottable simple 7.3 rpivottable (bells &amp; whistles) 7.4 formattable 7.5 kable", " Chapter 7 Tables 7.1 DT Usually “tidy” data is long https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html but tables need it wide so let’s reshape with the new tidyr::pivot_wider, then put into an interactive table # first reshape with new tidyr df_wide &lt;- df %&gt;% dplyr::arrange(city,desc(date)) %&gt;% dplyr::mutate(date1 = base::format(date, &quot;%d %b %y&quot;)) %&gt;% tidyr::pivot_wider(id_cols = city, names_from = date1, values_from = median) df_wide %&gt;% DT::datatable(df_wide) 7.2 rpivottable simple Have found rpivotables aren’t great for the end customer but are a good EDA tool instead of exporting to Excel and using their excellent pivot tables. rpivotTable::rpivotTable(data = df_red) 7.3 rpivottable (bells &amp; whistles) Once we’ve played around with it manually we might hard code our favourite settings for our document. rpivotTable::rpivotTable(data = df_red, rows = c(&quot;year&quot;,&quot;city&quot;), cols = &quot;date&quot;, inclusions = list(year = list(&quot;2014&quot;)), aggregatorName = &quot;Sum&quot;, vals = &quot;sales&quot;, rendererName = &quot;Line Chart&quot;) 7.4 formattable formattable::format_table(head(df)) city year month sales volume median listings inventory date Abilene 2000 1 72 5380000 71400 701 6.3 2000-01-01 Abilene 2000 2 98 6505000 58700 746 6.6 2000-02-01 Abilene 2000 3 130 9285000 58100 784 6.8 2000-03-01 Abilene 2000 4 98 9730000 68600 785 6.9 2000-04-01 Abilene 2000 5 141 10590000 67300 794 6.8 2000-05-01 Abilene 2000 6 156 13910000 66900 780 6.6 2000-06-01 7.5 kable kableExtra::kable(head(df)) city year month sales volume median listings inventory date Abilene 2000 1 72 5380000 71400 701 6.3 2000-01-01 Abilene 2000 2 98 6505000 58700 746 6.6 2000-02-01 Abilene 2000 3 130 9285000 58100 784 6.8 2000-03-01 Abilene 2000 4 98 9730000 68600 785 6.9 2000-04-01 Abilene 2000 5 141 10590000 67300 794 6.8 2000-05-01 Abilene 2000 6 156 13910000 66900 780 6.6 2000-06-01 "],
["colours.html", "Chapter 8 Colours", " Chapter 8 Colours For data viz I’m actually going to start with colours so we can use them later. RColorBrewer is a good package or pre-prepared palettes you can use quickly. # easy colours RColorBrewer::display.brewer.all() # create a palette for plotting # mypalette &lt;- RColorBrewer::brewer.pal(9,&quot;Set3&quot;) barplot(1:9,col = mypalette) #https://github.com/EmilHvitfeldt/prismatic library(prismatic) terrain &lt;- prismatic::colour(terrain.colors(10)) plot(terrain) terrain_gray &lt;- prismatic::clr_grayscale(terrain) plot(terrain_gray) terrain_darken &lt;- prismatic::clr_darken(terrain) plot(terrain_darken) terrain_negate &lt;- prismatic::clr_negate(terrain) plot(terrain_negate) #devtools::install_github(&quot;nschiett/fishualize&quot;, force = TRUE) #https://github.com/nschiett/fishualize/blob/master/README.md library(fishualize) you can also hand pick your own colours from this website http://tristen.ca/hcl-picker/ that I found on the Excellent blog on colours by Michael Toth: https://michaeltoth.me/a-detailed-guide-to-ggplot-colors.html So lets get some colours we like and put them in a list to use newpalette &lt;- c(&quot;#804759&quot;,&quot;#713E4E&quot;,&quot;#633543&quot;,&quot;#562D39&quot;,&quot;#48252F&quot;,&quot;#3B1D25&quot;) barplot(1:6,col = newpalette) "],
["final-document.html", "Chapter 9 Final document 9.1 crosstalk 9.2 flexdashboard", " Chapter 9 Final document 9.1 crosstalk TX &lt;- crosstalk::SharedData$new(df, ~year) 9.2 flexdashboard Put a link here "],
["which-viz-and-other-resources.html", "Chapter 10 Which viz and other resources", " Chapter 10 Which viz and other resources https://medium.com/multiple-views-visualization-research-explained/multiple-views-on-how-to-choose-a-visualization-b3ffc99fcddc https://www.kdnuggets.com/2019/06/how-choose-visualization.html http://experception.net/Franconeri_ExperCeptionDotNet_DataVisQuickRef.pdf https://www.data-to-viz.com https://github.com/billster45/r-guides-and-galleries#learn-to-visualise-data-with-r "]
]
